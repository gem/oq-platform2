import os
from geonode.settings import GEONODE_APPS, TEMPLATES, INSTALLED_APPS
import geonode.settings
import openquakeplatform

PROJECT_ROOT = os.path.abspath(os.path.dirname(geonode.__file__))
OQPLATFORM_ROOT = os.path.dirname(openquakeplatform.__file__)

SITEURL = 'http://%(lxc_ip)s:8000'
ALLOWED_HOSTS = ['%(lxc_ip)s', 'localhost']

AUTH_IP_WHITELIST = ['%(lxc_ip)s']

GEOSERVER_LOCATION = 'http://%(lxc_ip)s:8000/geoserver'
GEOSERVER_PUBLIC_LOCATION = 'http://%(lxc_ip)s:8000/geoserver'

WEBUIURL = 'http://%(webuiurl)s/'

FILE_PATH_FIELD_DIRECTORY = '%(datadir)s/'

# ROOT_URLCONF = 'openquakeplatform.urls'

REGISTRATION_OPEN = 'True'

THIRD_PARTY_URLS = {
    'leaflet_base_map': (
        'http://{s}.tiles.mapbox.com/v3/unhcr.map-8bkai3wa/{z}/{x}/{y}.png'
    ),
}

TILESTREAM_URL = '//tilestream.openquake.org'

GEOSERVER_LOCATION = 'http://%(lxc_ip)s:8080/geoserver/'
GEOSERVER_PUBLIC_LOCATION = 'http://%(lxc_ip)s:8080/geoserver/'

DATABASES = {
    'default': {
        'ENGINE': 'django.contrib.gis.db.backends.postgis',
        'NAME': '%(db_name)s',
        'USER': '%(db_user)s',
        'PASSWORD': '%(db_pass)s',
     },
    # vector datastore for uploads
    'datastore' : {
        'ENGINE': 'django.contrib.gis.db.backends.postgis',
        #'ENGINE': '', # Empty ENGINE name disables
        'NAME': 'geonode_dev-imports',
        'USER' : '%(db_user)s',
        'PASSWORD' : '%(db_pass)s',
        'HOST' : 'localhost',
        'PORT' : '5432',
    }
}

GEOSERVER_LOCATION = os.getenv(
    'GEOSERVER_LOCATION', 'http://%(lxc_ip)s:8080/geoserver/'
)
GEOSERVER_PUBLIC_LOCATION = os.getenv(
    'GEOSERVER_PUBLIC_LOCATION', 'http://%(lxc_ip)s:8080/geoserver/'
)

OGC_SERVER_DEFAULT_USER = os.getenv(
    'GEOSERVER_ADMIN_USER', 'admin'
)

OGC_SERVER_DEFAULT_PASSWORD = os.getenv(
    'GEOSERVER_ADMIN_PASSWORD', 'geoserver'
)

# OGC (WMS/WFS/WCS) Server Settings
OGC_SERVER = {
    'default': {
        'BACKEND': 'geonode.geoserver',
        'LOCATION': GEOSERVER_LOCATION,
        'LOGIN_ENDPOINT': 'j_spring_oauth2_geonode_login',
        'LOGOUT_ENDPOINT': 'j_spring_oauth2_geonode_logout',
        # PUBLIC_LOCATION needs to be kept like this because in dev mode
        # the proxy won't work and the integration tests will fail
        # the entire block has to be overridden in the local_settings
        'PUBLIC_LOCATION': GEOSERVER_PUBLIC_LOCATION,
        'USER' : OGC_SERVER_DEFAULT_USER,
        'PASSWORD' : OGC_SERVER_DEFAULT_PASSWORD,
        'MAPFISH_PRINT_ENABLED' : True,
        'PRINT_NG_ENABLED' : True,
        'GEONODE_SECURITY_ENABLED' : True,
        'GEOGIG_ENABLED' : False,
        'WMST_ENABLED' : False,
        'BACKEND_WRITE_ENABLED': True,
        'WPS_ENABLED' : False,
        'LOG_FILE': '%%s/geoserver/data/logs/geoserver.log' %% os.path.abspath(os.path.join(PROJECT_ROOT, os.pardir)),
        # Set to dictionary identifier of database containing spatial data in DATABASES dictionary to enable
        'DATASTORE': '', #'datastore',
        'PG_GEOGIG': False,
        'TIMEOUT': 10  # number of seconds to allow for HTTP requests
    }
}

# Additional directories which hold static files
STATICFILES_DIRS = [
    os.path.join(OQPLATFORM_ROOT, 'static'),
    os.path.join(PROJECT_ROOT, 'static'),
]

TEMPLATES[0]['DIRS'].insert(0, os.path.join(OQPLATFORM_ROOT, 'templates'))
TEMPLATES[0]['OPTIONS']['context_processors'].append(
    'openquakeplatform.utils.oq_context_processor')

ALLOWED_DOCUMENT_TYPES = [
    'csv', 'doc', 'docx', 'xls', 'xlsx', 'odt', 'ods', 'pdf',
    'jpg', 'jpeg', 'tif', 'tiff', 'png', 'gif', 'txt', 'zip',
    'tar', 'tgz', 'tbz', 'tar.gz', 'tar.bz2'
]
MAX_DOCUMENT_SIZE = 100

inst_new = tuple()
for app in INSTALLED_APPS:
    if app == 'django.contrib.admin':
        inst_new += ('nested_inlines', app)
    else:
        inst_new += (app, )
INSTALLED_APPS = inst_new

INSTALLED_APPS += (
    'django.contrib.redirects',
    'nested_inline',
    'chained_multi_checkboxes',
    'chained_selectbox',
    'openquakeplatform_taxtweb',
    'openquakeplatform_ipt',
    'openquakeplatform.vulnerability',
    'openquakeplatform_building_class',
)

MIDDLEWARE_CLASSES = (
    'django.middleware.common.CommonMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.contrib.redirects.middleware.RedirectFallbackMiddleware',
    'pagination.middleware.PaginationMiddleware',
    # irv needs csrf to be disabled to work
    #'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    # geonode.security is enabled to lockdown the website
    'geonode.security.middleware.LoginRequiredMiddleware',

    # If you use SessionAuthenticationMiddleware, be sure it appears before OAuth2TokenMiddleware.
    # SessionAuthenticationMiddleware is NOT required for using django-oauth-toolkit.
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'oauth2_provider.middleware.OAuth2TokenMiddleware',
)

# Add additional paths (as regular expressions) that don't require
# authentication.
AUTH_EXEMPT_URLS = ('/$',
                    '/account/signup/',
                    '/calculate/',
                    '/share/',
                    '/explore/',
                    '/geoserver/',
                    '/vulnerability/intensity_measure_csc?.*',
                    '/vulnerability/engineering_demand_csc?.*',
                    '/vulnerability/resp_var_par_csc?.*',
                    '/vulnerability/resp_var_units_csc?.*',
                    '/taxtweb/',
                    '/building-class/')

# replacement of default authentication backend in order to support
# permissions per object.
AUTHENTICATION_BACKENDS = (
    'oauth2_provider.backends.OAuth2Backend',
    'django.contrib.auth.backends.ModelBackend',
    'guardian.backends.ObjectPermissionBackend',
)

OAUTH2_PROVIDER = {
    'SCOPES': {
        'read': 'Read scope',
        'write': 'Write scope',
        'groups': 'Access to your groups'
    },

    'CLIENT_ID_GENERATOR_CLASS': 'oauth2_provider.generators.ClientIdGenerator',
}

# Absolute filesystem path to the directory that will be used to upload/download schema.xsd files through gsschema app
GSSCHEMA_CONFIG = {
    'gsschema_dir': '/var/lib/geoserver_data/'
}

# where to save tilebundler tilesets. Should move this to  OGC_SERVER['default']['TILEBUNDLER_DATASTORE_DIR']
TILEBUNDLER_CONFIG = {
    'tileset_dir': '/var/lib/geoserver_data/tilebundler-store'
}

MAP_BASELAYERS = [
    {
        "source": {
            "ptype": "gxp_wmscsource",
            "url": OGC_SERVER['default']['LOCATION'] + "wms",
            "restUrl": "/gs/rest",
            "name": "local geoserver"
        }
    },
    {
        "source": {"ptype": "gxp_osmsource", "name": "OpenStreetMap"},
        "type": "OpenLayers.Layer.OSM",
        "name": "mapnik",
        "title": "OpenStreetMap",
        "args": ["OpenStreetMap"],
        "visibility": True,
        "fixed": True,
        "group":"background"
    }
]

MAP_BASELAYERS = [
    {
        "source": {
            "ptype": "gxp_wmscsource",
            "url": OGC_SERVER['default']['LOCATION'] + "wms",
            "restUrl": "/gs/rest",
            "name": "local geoserver"
        }
    },
    {
        "source": {"ptype": "gxp_osmsource", "name": "OpenStreetMap"},
        "type": "OpenLayers.Layer.OSM",
        "name": "mapnik",
        "title": "OpenStreetMap",
        "args": ["OpenStreetMap"],
        "visibility": True,
        "fixed": True,
        "group":"background"
    }
]

FILESERVICE_CONFIG = {
    'store_dir': '/var/lib/geoserver_data/file-service-store',
    # example: ('*', ) or ('.mov', '.jpg', ...),
    'types_allowed': ('*', ),
    # maploom will replace {} with the media item name such as 7ff194b54ab57a829094dc0afc624c78815ec02c.jpg
    'url_template': '/api/fileservice/view/{}'
}

# These limits define the maximum data that can be retreived
# from GEM in the Exposure app
# Max area size in degrees (i.e. 2 * 2)
EXPOSURE_MAX_EXPORT_AREA_SQ_DEG = 4
# Max number of rows
EXPOSURE_MAX_TOT_GRID_COUNT = 100000

