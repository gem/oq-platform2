#!/usr/bin/env python
# -*- coding: utf-8 -*-
import unittest
import os
import sys
import csv
import time

from openquake.moon import platform_get
from selenium.webdriver.common.keys import Keys


def general_information(pl, name, categ, struct_type, taxo_type,
                        taxo_text, taxo_gem_vis, type_ass, auth, art_tit,
                        conference, year, web_link, gen_comm, use_case):

    dom_name = pl.xpath_finduniq("//form[@id='generalinformation_form']/div/"
                                 "fieldset/div/div/input[@id='id_name']")
    dom_name.send_keys(name)

    dom_categ = pl.xpath_finduniq(
        "//form[@id='generalinformation_form']/div/"
        "fieldset/div/div/select[@id='id_category']")
    pl.select_item_set(dom_categ, categ)

    dom_struct_type = pl.xpath_finduniq(
        "//form[@id='generalinformation_form']/div/"
        "fieldset/div/div/select[@id='id_structure_type']")
    pl.select_item_set(dom_struct_type, struct_type)

    dom_taxo_type = pl.xpath_finduniq(
        "//form[@id='generalinformation_form']/div/"
        "fieldset/div/div/select[@id='id_taxonomy_type']")
    pl.select_item_set(dom_taxo_type, taxo_type)

    dom_taxo_text = pl.xpath_finduniq(
        "//form[@id='generalinformation_form']/div/"
        "fieldset/div/div/input[@id='id_taxonomy_text_1']")
    dom_taxo_text.send_keys(taxo_text)

    pl.driver.execute_script(
        '$(arguments[0]).trigger("change")', dom_taxo_text)

    dom_taxo_text_taxtweb = pl.xpath_finduniq(
        "//form[@id='generalinformation_form']/div/"
        "fieldset/div/div/a[@id='id_taxonomy_text_taxtweb']")

    dom_taxo_text_taxtweb.click()


def hide_header_footer():

    pla = platform_get()

    header = pla.xpath_finduniq(
        "//nav[@class='navbar navbar-inverse navbar-fixed-top']")

    footer = pla.xpath_finduniq("//footer")

    time.sleep(3)

    # hide
    pla.driver.execute_script(
        "$(arguments[0]).attr('style','display:none;')", header)
    pla.driver.execute_script(
        "$(arguments[0]).attr('style','display:none;')", footer)


class VulnTest(unittest.TestCase):

    def curve_test(self):

        pla = platform_get()

        vul_url = '%s' % ('/vulnerability/list')

        pla.get(vul_url)

        # hide footer
        hide_header_footer()

        pla.header_height_store(
            "//nav[@class='navbar navbar-inverse navbar-fixed-top']")

        varname = '%s' % ('15 Story High Ductile RC-MRFs'
                          ' (Horizontal Excitation) [Noroozinejad 2016]')

        new_varname = '%s' % ('15 Story High Ductile RC-MRFs'
                              ' (Horizontal Excitation)')

        varauths = '%s' % ('Ehsan Noroozinejad Farsangi, Abbas Ali Tasnimi')

        varartitle = '%s' % (
            'The influence of coupled horizontalâ€“vertical'
            ' ground excitations on the collapse margins of modern RC-MRFs')

        varartitle = unicode(varartitle.decode("iso-8859-4"))

        varconfpubname = '%s' % (
            'International Journal of Advanced Structural Engineering')

        varyear = '%s' % ('2016')

        auth_name = '%s' % ('Barbat et al.')

        # check filtering
        auth_field = pla.xpath_finduniq(
            "//input[@id='id_author' and @type='text']")
        auth_field.send_keys(auth_name)

        # click filtering
        newfilter = pla.xpath_finduniq(
            "//button[@type='submit' and @value='Filter']",
            100, 1)
        newfilter.click()

        # check if exist function after filtering
        pla.xpath_finduniq(
            "//div[@id='list_entry-30'"
            " and normalize-space(text())='Barbat et al (2006)"
            " - CR/LFLS_High-rise (8storeys)']")

        # click create new function
        newf = pla.xpath_finduniq(
            "//button[@title='Create a new function.']",
            100, 1)
        newf.click()

        pla.wait_new_page(
            newf, '/admin/vulnerability/generalinformation/add', timeout=30)

        # hide footer
        hide_header_footer()

        # start informations
        owner_field = pla.xpath_finduniq(
            "//select[@id='id_owner' and @name='owner']"
            "/option[normalize-space(text())='admin']")
        owner_field.click()

        name_field = pla.xpath_finduniq(
            "//input[@id='id_name' and @type='text']")
        name_field.send_keys(varname)

        cat_field = pla.xpath_finduniq(
            "//select[@id='id_category' and @name='category']"
            "/option[normalize-space(text())='Structure specific']")
        cat_field.click()

        str_type_field = pla.xpath_finduniq(
            "//select[@id='id_structure_type' and @name='structure_type']"
            "/option[normalize-space(text())='Building']")
        str_type_field.click()

        tax_type_field = pla.xpath_finduniq(
            "//select[@id='id_taxonomy_type' and @name='taxonomy_type']"
            "/option[normalize-space(text())='GEM']")
        tax_type_field.click()

        chk_tax_field = pla.xpath_finduniq(
            "//input[@id='id_taxonomy_text_0' and @type='checkbox']")
        chk_tax_field.click()

        visual_field = pla.xpath_finduniq(
            "//select[@id='OutTypeCB']"
            "/option[normalize-space(text())='Short']")
        visual_field.click()

        type_ofass_field = pla.xpath_finduniq(
            "//select[@id='id_type_of_assessment'"
            " and @name='type_of_assessment']"
            "/option[normalize-space(text())='Fragility']")
        type_ofass_field.click()

        auths_field = pla.xpath_finduniq(
            "//input[@id='id_authors' and @type='text' and @name='authors']")
        auths_field.send_keys(varauths)

        art_title_field = pla.xpath_finduniq(
            "//input[@id='id_article_title' and @type='text'"
            " and @name='article_title']")
        art_title_field.send_keys(varartitle)

        conf_pub_name_field = pla.xpath_finduniq(
            "//input[@id='id_publication_conference_name' and @type='text'"
            " and @name='publication_conference_name']")
        conf_pub_name_field.send_keys(varconfpubname)

        year_field = pla.xpath_finduniq(
            "//input[@id='id_year' and @type='text' and @name='year']")
        year_field.send_keys(varyear)

        # Fragility Functions
        var_lim = 'Horizontal Excitation'

        owner_frag_select = pla.xpath_finduniq(
            "//select[@id='id_fragility_func-0-owner'"
            " and @name='fragility_func-0-owner']")

        owner_frag_field = pla.xpath_finduniq(
            "option[normalize-space(text())='admin']",
            el=owner_frag_select)

        pla.scroll_into_view(owner_frag_select)

        owner_frag_field.click()

        meth_estim_select = pla.xpath_finduniq(
            "//select[@id='id_fragility_func-0-method_of_estimation'"
            " and @name='fragility_func-0-method_of_estimation']")

        meth_estim_field = pla.xpath_finduniq(
            "option[normalize-space(text())='Analytical']",
            el=meth_estim_select)

        pla.scroll_into_view(meth_estim_select)

        meth_estim_field.click()

        dam_scale_select = pla.xpath_finduniq(
            "//select[@id='id_fragility_func-0-damage_scale'"
            " and @name='fragility_func-0-damage_scale']")
        dam_scale_field = pla.xpath_finduniq(
            "option[normalize-space(text())='Custom']",
            el=dam_scale_select)
        dam_scale_field.click()

        eng_param_field = pla.xpath_finduniq(
            "//select[@id='id_fragility_func-0-engineering_demand_par'"
            " and @name='fragility_func-0-engineering_demand_par']"
            "/option[normalize-space(text())='Interstorey drift']")
        eng_param_field.click()

        desc_limit_field = pla.xpath_finduniq(
            "//input[@id="
            "'id_fragility_func-0-limit_states_desc' and @type='text'"
            " and @name='fragility_func-0-limit_states_desc']")
        desc_limit_field.send_keys(var_lim)

        func_dist_type_field = pla.xpath_finduniq(
            "//select[@id='id_fragility_func-0-func_distr_type'"
            " and @name='fragility_func-0-func_distr_type']"
            "/option[normalize-space(text())='Continuous']")
        func_dist_type_field.click()

        # Analytical Modelling Information
        varnumbdist = '4'

        owner_mod_info_field = pla.xpath_finduniq(
            "//select[@id='id_fragility_func-0-analytical_model_info-0-owner'"
            " and @name='fragility_func-0-analytical_model_info-0-owner']"
            "/option[normalize-space(text())='admin']")
        owner_mod_info_field.click()

        analysis_type_field = pla.xpath_finduniq(
            "//select[@id="
            "'id_fragility_func-0-analytical_model_info-0-analysis_type'"
            " and @name="
            "'fragility_func-0-analytical_model_info-0-analysis_type']"
            "/option[normalize-space(text())="
            "'Nonlinear dynamic analysis (NLD)']")
        analysis_type_field.click()

        model_type_select = pla.xpath_finduniq(
            "//select[@id="
            "'id_fragility_func-0-analytical_model_info-0-model_type'"
            " and @name='"
            "fragility_func-0-analytical_model_info-0-model_type']")
        model_type_field = pla.xpath_finduniq(
            "option[normalize-space(text())='2D story-by-story']",
            el=model_type_select)
        model_type_field.click()

        meth_uncert_field = pla.xpath_finduniq(
            "//select[@id="
            "'id_fragility_func-0-analytical_model_"
            "info-0-method_uncert_propag'"
            " and @name="
            "'fragility_func-0-analytical_model_info-0-method_uncert_propag']"
            "/option[normalize-space(text())="
            "'Random Monte-Carlo or Latin Hypercube sampling']")
        meth_uncert_field.click()

        numb_dist_field = pla.xpath_finduniq(
            "//input[@id="
            "'id_fragility_func-0-analytical_model_info-0-models_num'"
            " and @type='text'"
            " and @name="
            "'fragility_func-0-analytical_model_info-0-models_num']")
        numb_dist_field.send_keys(varnumbdist)

        eval_im_select = pla.xpath_finduniq(
            "//select[@id="
            "'id_fragility_func-0-analytical_model_info-0-evaluation_of_im'"
            " and @name="
            "'fragility_func-0-analytical_model_info-0-evaluation_of_im']")
        eval_im_field = pla.xpath_finduniq(
            "option[normalize-space(text())="
            "'Spectrum-compatible Accelerograms']",
            el=eval_im_select)
        pla.scroll_into_view(eval_im_select)
        eval_im_field.click()

        # Predictor Variables (I.M.)
        period = '%s' % ('2.28')
        min_period = '%s' % ('0.75')
        max_period = '%s' % ('2.75')

        owner_predict_select = pla.xpath_finduniq(
            "//select[@id='id_fragility_func-0-predictor_var-0-owner']")

        owner_predict_field = pla.xpath_finduniq(
            "option[normalize-space(text())='admin']",
            el=owner_predict_select)

        pla.scroll_into_view(owner_predict_select)

        owner_predict_field.click()

        int_measure_type_field = pla.xpath_finduniq(
            "//select[@id="
            "'id_fragility_func-0-predictor_var-0-intensity_measure_type'"
            " and @name="
            "'fragility_func-0-predictor_var-0-intensity_measure_type']"
            "/option[normalize-space(text())='Sa(T)']")
        int_measure_type_field.click()

        int_measure_unit_field = pla.xpath_finduniq(
            "//select[@id="
            "'id_fragility_func-0-predictor_var-0-intensity_measure_unit'"
            " and @name="
            "'fragility_func-0-predictor_var-0-intensity_measure_unit']"
            "/option[normalize-space(text())='g']")
        int_measure_unit_field.click()

        type_period_field = pla.xpath_finduniq(
            "//select[@id='id_fragility_func-0-predictor_var-0-type_of_period'"
            " and @name='fragility_func-0-predictor_var-0-type_of_period']"
            "/option[normalize-space(text())='Telastic (s)']")
        type_period_field.click()

        period_field = pla.xpath_finduniq(
            "//input[@id='id_fragility_func-0-predictor_var-0-period'"
            " and @type='number'"
            " and @name='fragility_func-0-predictor_var-0-period']")
        period_field.send_keys(period)

        min_field = pla.xpath_finduniq(
            "//input[@id='id_fragility_func-0-predictor_var-0-minimum_im'"
            " and @type='number'"
            " and @name='fragility_func-0-predictor_var-0-minimum_im']")
        min_field.send_keys(min_period)

        max_field = pla.xpath_finduniq(
            "//input[@id='id_fragility_func-0-predictor_var-0-maximum_im'"
            " and @type='number'"
            " and @name='fragility_func-0-predictor_var-0-maximum_im']")
        max_field.send_keys(max_period)

        # Continous Function Distributions
        mean = '%s' % ('1.85')
        stan_dev = '%s' % ('.23')
        area = '%s' % ('')

        owner_continous_select = pla.xpath_finduniq(
            "//select[@id='id_fragility_func-0-func_distr_frag_cont-0-owner'"
            " and @name='fragility_func-0-func_distr_frag_cont-0-owner']")
        owner_continous_field = pla.xpath_finduniq(
            "option[normalize-space(text())='admin']",
            el=owner_continous_select)
        pla.scroll_into_view(owner_continous_select)
        owner_continous_field.click()

        mean_field = pla.xpath_finduniq(
            "//input[@id='id_fragility_func-0-func_distr_frag_cont-0-mean'"
            " and @type='text'"
            " and @name='fragility_func-0-func_distr_frag_cont-0-mean']")
        mean_field.send_keys(mean)

        stan_dev_field = pla.xpath_finduniq(
            "//input[@id='id_fragility_func-0-func_distr_frag_cont-0-std_dev'"
            " and @type='text'"
            " and @name='fragility_func-0-func_distr_frag_cont-0-std_dev']")
        stan_dev_field.send_keys(stan_dev)

        fdist_shape_field = pla.xpath_finduniq(
            "//select[@id="
            "'id_fragility_func-0-func_distr_frag_cont-0-func_distr_shape'"
            " and @name="
            "'fragility_func-0-func_distr_frag_cont-0-func_distr_shape']"
            "/option[normalize-space(text())='Lognormal']")
        fdist_shape_field.click()

        # Q.R.S For Analytical Functions/Curves
        owner_qrs_select = pla.xpath_finduniq(
            "//select[@id='id_fragility_func-0-qrs_analytical-0-owner'"
            " and @name='fragility_func-0-qrs_analytical-0-owner']")
        owner_qrs_field = pla.xpath_finduniq(
            "option[normalize-space(text())='admin']",
            el=owner_qrs_select)
        pla.scroll_into_view(owner_qrs_select)
        owner_qrs_field.click()

        # Data quality
        compl_model_field = pla.xpath_finduniq(
            "//select[@id='"
            "id_fragility_func-0-qrs_analytical-0-model_completeness'"
            " and @name="
            "'fragility_func-0-qrs_analytical-0-model_completeness']"
            "/option[normalize-space(text())='Superior']")
        compl_model_field.click()

        # Geographical Applicability
        owner_geog_select = pla.xpath_finduniq(
            "//select[@id='id_geo_applicability-0-owner'"
            " and @name='geo_applicability-0-owner']")
        owner_geog_field = pla.xpath_finduniq(
            "option[normalize-space(text())='admin']",
            el=owner_geog_select)
        pla.scroll_into_view(owner_geog_select)
        owner_geog_field.click()

        region_field = pla.xpath_finduniq(
            "//select[@id='id_geo_applicability-0-region'"
            " and @name='geo_applicability-0-region']"
            "/option[normalize-space(text())='Africa (0)']")
        region_field.click()

        chk_region_field = pla.xpath_findfirst(
            "//input[@value='Select all'"
            " and @type='button']")
        chk_region_field.send_keys(Keys.ENTER)

        area_field = pla.xpath_finduniq(
            "//input[@id='id_geo_applicability-0-area' and @type='text'"
            " and @name='geo_applicability-0-area']")
        area_field.send_keys(area)

        # click save button
        save = pla.xpath_findfirst(
            "//input[@type='submit' and @class='default' and @name='_save']")
        save.click()

        pla.xpath_finduniq(
            "//li[@class='success']")

        # hide footer
        hide_header_footer()

        # edit function
        pla.get(vul_url)

        curve = pla.xpath_finduniq(
            "//div[@class='list_entry'"
            " and normalize-space(text())='%s']" % varname)
        curve.click()

        details = pla.xpath_finduniq(
            "//button[@id='more_details']",
            100, 1)
        details.click()

        edit = pla.xpath_finduniq(
            "//button[@value='Edit' and @title='Edit curve']",
            100, 1)
        edit.click()

        # hide footer
        # hide_header_footer()

        # edit name
        edit_name_field = pla.xpath_finduniq(
            "//input[@id='id_name' and @type='text']")
        edit_name_field.clear()
        edit_name_field.send_keys('%s' % new_varname)

        edit_owner_geog_select = pla.xpath_finduniq(
            "//select[@id='id_geo_applicability-0-owner'"
            " and @name='geo_applicability-0-owner']")
        edit_owner_geog_field = pla.xpath_finduniq(
            "option[normalize-space(text())='admin']",
            el=edit_owner_geog_select)
        pla.scroll_into_view(edit_owner_geog_select)
        edit_owner_geog_field.click()

        edit_region_field = pla.xpath_finduniq(
            "//select[@id='id_geo_applicability-0-region'"
            " and @name='geo_applicability-0-region']"
            "/option[normalize-space(text())='Asia (0)']")
        edit_region_field.click()

        # save edit
        edit_save = pla.xpath_findfirst(
            "//input[@type='submit' and @class='default' and @name='_save']")
        edit_save.click()

        # add to cart
        pla.get(vul_url)

        add_cart_curve = pla.xpath_finduniq(
            "//div[@class='list_entry'"
            " and normalize-space(text())='%s']" % new_varname)
        add_cart_curve.click()

        add_cart_details = pla.xpath_finduniq(
            "//button[@id='more_details']",
            100, 1)
        add_cart_details.click()

        add_to_cart = pla.xpath_finduniq(
            "//button[@value='Add to cart'"
            " and @title='add to collection of curves to export as a single NRML file']",
            100, 1)
        add_to_cart.click()

        cart = pla.xpath_finduniq(
            "//button[@value='Back to cart'"
            "and @title='go to curves collection exportable as single NRML file']",
            100, 1)
        cart.click()

        pla.xpath_finduniq(
            "//div[normalize-space(text())='%s']" % new_varname)

        # delete function
        pla.get(vul_url)

        del_curve = pla.xpath_finduniq(
            "//div[@class='list_entry'"
            " and normalize-space(text())='%s']" % new_varname)
        del_curve.click()

        del_details = pla.xpath_finduniq(
            "//button[@id='more_details']",
            100, 1)
        del_details.click()

        del_edit = pla.xpath_finduniq(
            "//button[@value='Edit' and @title='Edit curve']",
            100, 1)
        del_edit.click()

        # deleting curve
        delete = pla.xpath_findfirst(
            "//a[@class='deletelink' and normalize-space(text())='Delete']",
            100, 1)
        delete.click()

        # confirm delete
        conf_delete = pla.xpath_finduniq(
            "//input[@type='submit']",
            100, 1)
        conf_delete.send_keys(Keys.PAGE_DOWN)

        # Check if function exist or not
        pla.get(vul_url)

        try:
            pla.xpath_finduniq(
                "//div[@class='list_entry'"
                " and normalize-space(text())='%s']",
                timeout=5.0 % varname)
        except:
            pass
        else:
            self.assertFalse(False, msg="Deleted function")


@unittest.skip("temporarily disabled")
class VulnerabilityTest(unittest.TestCase):
    def jasmine_test(self):

        pla = platform_get()

        # go to test page
        pla.get('/vulnerability/test')

        # wait DOM population via async JS
        pla.xpath_finduniq(
            "//div[@class='jasmine_html-reporter']/div"
            "[@class='results']/div[@class='summary']",
            100, 0.1)

        # check the result of tests
        pla.xpath_finduniq(
            "//span[@class='bar passed' and contains"
            "(normalize-space(text()), ', 0 failures')]")

    def taxonomy_full2short_test(self):

        from openquakeplatform.common.taxonomy import taxonomy_full2short

        failed = 0
        data_path = os.path.join(os.path.dirname(
            sys.modules[self.__module__].__file__), 'data')

        with open(os.path.join(data_path, 'taxonomies.txt')) as f:
            csv_rows = csv.reader(f, delimiter='|')
            for csv_row in csv_rows:
                taxonomy_type = csv_row[0]
                full = csv_row[1]
                short_exp = csv_row[2]

                # if taxonomy_type != gem_taxonomy => continue
                if taxonomy_type != '1':
                    continue
                short = taxonomy_full2short(full)
                if short != short_exp:
                    sys.stderr.write("IN: [%s] OUT: [%s] EXP: [%s]\n" % (
                        full, short, short_exp))
                    failed += 1

        self.assertEqual(failed, 0)

    def taxonomy_test(self):

        pla = platform_get()

        pla.user_add('one', 'one', 'one@example.com')
        plb = pla.platform_create(user='one', passwd='one')
        plb.init(landing='/vulnerability/list')

        new_func_btn = plb.xpath_finduniq(
            "//li[@class='vuln_menu']/form[@action='/admin/vulnerability/"
            "generalinformation/add/']/button[@type='submit' and "
            "@value='New function']", 300, 1)

        new_func_btn.click()
        plb.wait_new_page(new_func_btn,
                          '/admin/vulnerability/generalinformation/add',
                          timeout=20)

        general_information(plb, "test function from selenium",
                            "Structure specific", "Building", "GEM",
                            "CU+CIP", "taxo_gem_vis", "type_ass",
                            "auth", "art_tit",
                            "conference", "year", "web_link", "gen_comm",
                            "use_case")

        # taxtweb popup
        plb.select_window_by_name("taxtweb - GEM building taxonomy editor")

        try:
            dontshow_tag = plb.xpath_finduniq(
                "//div[@id='taxtweb_splash']//input[@name='dontshowmeagain']",
                times=10)
            plb.wait_visibility(dontshow_tag)
            dontshow_tag.click()
            close_tag = plb.xpath_finduniq(
                "//div[@id='taxtweb_splash']//button[@name='close_btn']")
            close_tag.click()
        # for future inspections if needed
        # except Exception as e:
            # print "EXCEPT HERE ! %s" % type(e)
        except Exception:
            pass

        samedirect = plb.xpath_finduniq("//input[@id='DirectionCB']")
        samedirect.click()

        dir_y = plb.xpath_finduniq("//li[@id='sub1tab_id-2']")
        dir_y.click()

        material_y = plb.xpath_finduniq("//select[@id='MaterialCB12']")
        plb.select_item_set(material_y, "Steel")

        mat_tech_y = plb.xpath_finduniq("//select[@id='MaterialCB22']")
        plb.select_item_set(mat_tech_y, "Hot-rolled steel members")

        mat_prop_y = plb.xpath_finduniq("//select[@id='MaterialCB32']")
        plb.select_item_set(mat_prop_y, "Riveted connections")

        popform = plb.xpath_finduniq("//li[@id='id_populate_form']")
        popform.click()
        time.sleep(1)

        # close popup and return to main window
        plb.windows_reset()

        taxt_view = plb.xpath_finduniq("//input[@id='id_taxonomy_gem_view']")
        self.assertEqual(taxt_view.get_attribute('value'),
                         u'DX/CU+CIP/DY/S+SR+RIV')

        outtype = plb.xpath_finduniq("//select[@id='OutTypeCB']")
        plb.select_item_set(outtype, "Full")

        taxt_view = plb.xpath_finduniq("//input[@id='id_taxonomy_gem_view']")
        self.assertEqual(taxt_view.get_attribute('value'),
                         u'DX+D99/CU+CIP/L99/DY+D99/S+SR+RIV/L99/H99/Y99/OC99/'
                         'BP99/PLF99/IR99/EW99/RSH99+RMT99+R99+RWC99/'
                         'F99+FWC99/FOS99')

        # to be continue ...
        pla.platform_destroy(plb)

        pla.user_del('one')
