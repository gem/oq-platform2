#!/usr/bin/env python
# -*- coding: utf-8 -*-
import unittest
import os
import sys
import csv
import time
import django

from openquake.moon import platform_get
from selenium.webdriver.common.keys import Keys


def func_distr_frag_cont(
        pl, root, owner=None, mean=None, std_dev=None, func_distr_shape=None,
        coeff_variation_mean=None, coeff_variation_std_dev=None,
        predictor_var_corr_matrix=None):

#     bitem = pl.xpath_finduniq(
#         "//form[@id='generalinformation_form']/div/"
#         "div[@id='fragility-func-group']/"
#         "div[@id='fragility-func-0']/"
#         "div[@id='fragility-func-0-func_distr_frag_cont-group']")

    root = pl.xpath_finduniq(
        ("div[@id='fragility_func-0-func_distr_frag_cont-group']/"
         "div[@id='fragility_func-0-func_distr_frag_cont-0']"),
        el=root)
    if owner:
        owner_field = pl.xpath_finduniq(
            ("fieldset/div/div/select[@name='"
             "fragility_func-0-func_distr_frag_cont-0-owner']"),
            el=root)
        pl.select_item_set(owner_field, owner)

    if mean:
        mean_text = pl.xpath_finduniq(
            ("fieldset/div/div/input[@name='fragility_func-0-func_distr"
             "_frag_cont-0-mean' and @type='text']"), el=root)
        mean_text.clear()
        mean_text.send_keys(mean)

    if std_dev:
        std_dev_text = pl.xpath_finduniq(
            ("fieldset/div/div/input[@name='fragility_func-0-func_distr"
             "_frag_cont-0-std_dev' and @type='text']"), el=root)
        std_dev_text.clear()
        std_dev_text.send_keys(std_dev)

    if func_distr_shape:
        func_distr_shape_field = pl.xpath_finduniq(
            ("fieldset/div/div/select[@name='"
             "fragility_func-0-func_distr_frag_cont-0-func_distr_shape']"),
            el=root)
        pl.select_item_set(func_distr_shape_field, func_distr_shape)

    return root


def fragility_func(
        pl, root, owner=None, method_of_estimation=None,
        damage_scale=None, engineering_demand_par=None,
        limit_states_desc=None, func_distr_type=None):
    root = pl.xpath_finduniq(
        "div[@id='fragility_func-group']/div[@id='fragility_func-0']",
        el=root)
    if owner:
        owner_field = pl.xpath_finduniq(
            "fieldset/div/div/select[@name='fragility_func-0-owner']",
            el=root)
        pl.select_item_set(owner_field, owner)

    if method_of_estimation:
        method_of_estimation_field = pl.xpath_finduniq(
            "fieldset/div/div/select[@name='fragility_func-0"
            "-method_of_estimation']", el=root)
        pl.select_item_set(method_of_estimation_field, method_of_estimation)

    if damage_scale:
        damage_scale_field = pl.xpath_finduniq(
            "fieldset/div/div/select[@name='fragility_func-0"
            "-damage_scale']", el=root)
        pl.select_item_set(damage_scale_field, damage_scale)

    if engineering_demand_par:
        engineering_demand_par_field = pl.xpath_finduniq(
            "fieldset/div/div/div/select[@name='fragility_func-0"
            "-engineering_demand_par']", el=root)
        pl.select_item_set(engineering_demand_par_field,
                           engineering_demand_par)

    if limit_states_desc:
        limit_states_desc_text = pl.xpath_finduniq(
            "fieldset/div/div/input[@name='fragility_func-0"
            "-limit_states_desc' and @type='text']", el=root)
        limit_states_desc_text.send_keys(limit_states_desc)

    if func_distr_type:
        func_distr_type_field = pl.xpath_finduniq(
            "fieldset/div/div/select[@name='fragility_func-0"
            "-func_distr_type']", el=root)
        pl.select_item_set(func_distr_type_field,
                           func_distr_type)
    return root


def general_information(pl, owner=None, name=None, categ=None,
                        struct_type=None, taxo_type=None, taxo_text=None,
                        type_ass=None, auth=None, art_tit=None,
                        conference=None, year=None, web_link=None,
                        gen_comm=None, use_case=None):

    root = pl.xpath_finduniq(
            "//form[@id='generalinformation_form']/div")

    if owner:
        owner_field = pl.xpath_finduniq(
            "//select[@id='id_owner' and @name='owner']")
        pl.select_item_set(owner_field, owner)

    if name:
        dom_name = pl.xpath_finduniq(
            "fieldset/div/div/input[@id='id_name']", el=root)
        dom_name.send_keys(name)
        pl.driver.execute_script(
            '$(arguments[0]).trigger("change")', dom_name)

    if categ:
        dom_categ = pl.xpath_finduniq(
            "fieldset/div/div/select[@id='id_category']", el=root)
        pl.select_item_set(dom_categ, categ)

    if struct_type:
        dom_struct_type = pl.xpath_finduniq(
            "fieldset/div/div/select[@id='id_structure_type']", el=root)
        pl.select_item_set(dom_struct_type, struct_type)

    if taxo_type:
        dom_taxo_type = pl.xpath_finduniq(
            "fieldset/div/div/div/select[@id='id_taxonomy_type']", el=root)
        pl.select_item_set(dom_taxo_type, taxo_type)

    if taxo_text:
        dom_taxo_text = pl.xpath_finduniq(
            "fieldset/div/div/input[@id='id_taxonomy_text_1']", el=root)
        dom_taxo_text.send_keys(taxo_text)

        pl.driver.execute_script(
            '$(arguments[0]).trigger("change")', dom_taxo_text)

    if type_ass:
        dom_type_ass = pl.xpath_finduniq(
            "fieldset/div/div/select[@name='type_of_assessment']", el=root)
        pl.select_item_set(dom_type_ass, type_ass)

    if auth:
        dom_auth = pl.xpath_finduniq(
            ("fieldset/div/div/input[@type='text'"
             " and @name='authors']"), el=root)
        dom_auth.send_keys(auth)

    if art_tit:
        dom_art_tit = pl.xpath_finduniq(
            ("fieldset/div/div/input[@type='text'"
             " and @name='article_title']"), el=root)
        dom_art_tit.send_keys(art_tit)

    if conference:
        dom_conference = pl.xpath_finduniq(
            ("fieldset/div/div/input[@type='text'"
             " and @name='publication_conference_name']"), el=root)
        dom_conference.send_keys(conference)

    if year:
        dom_year = pl.xpath_finduniq(
            ("fieldset/div/div/input[@type='text'"
             " and @name='year']"), el=root)
        dom_year.send_keys(year)

    if web_link:
        dom_web_link = pl.xpath_finduniq(
            ("fieldset/div/div/input[@type='urp'"
             " and @name='web_link']"), el=root)
        dom_web_link.send_keys(web_link)

    if gen_comm:
        pass

    if use_case:
        pass

    return root


def hide_header_footer(hide_header=True, hide_footer=True,
                       disp='none', pl=None):
    if pl is None:
        pl = platform_get()

    if hide_header:
        header = pl.xpath_finduniq(
            "//nav[@class='navbar navbar-inverse navbar-fixed-top']")

    if hide_footer:
        footer = pl.xpath_finduniq("//footer")

    time.sleep(3)

    # hide
    if hide_header:
        pl.driver.execute_script(
            "$(arguments[0]).attr('style','display:%s;')" % disp, header)
    if hide_footer:
        pl.driver.execute_script(
            "$(arguments[0]).attr('style','display:%s;')" % disp, footer)


class VulnTest(unittest.TestCase):

    def curve_test(self):

        pla = platform_get()

        vul_url = '%s' % ('/vulnerability/list')

        pla.get(vul_url)

        # hide footer
        hide_header_footer()

        pla.header_height_store(
            "//nav[@class='navbar navbar-inverse navbar-fixed-top']")

        varname = ('TEST 15 Story High Ductile RC-MRFs'
                   ' (Horizontal Excitation) [Noroozinejad 2016]')

        new_varname = ('TEST 15 Story High Ductile RC-MRFs'
                       ' (Horizontal Excitation)')

        varauths = 'Ehsan Noroozinejad Farsangi, Abbas Ali Tasnimi'

        varartitle = ('The influence of coupled horizontalâ€“vertical'
                      ' ground excitations on the collapse margins'
                      ' of modern RC-MRFs')

        varartitle = unicode(varartitle.decode("iso-8859-4"))

        varconfpubname = (
            'International Journal of Advanced Structural Engineering')

        varyear = '2016'

        auth_name = 'Barbat et al.'

        # check filtering
        auth_field = pla.xpath_finduniq(
            "//input[@id='id_author' and @type='text']")
        auth_field.send_keys(auth_name)

        # click filtering
        newfilter = pla.xpath_finduniq(
            "//button[@type='submit' and @value='Filter']",
            100, 1)
        newfilter.click()

        # check if exist function after filtering
        pla.xpath_finduniq(
            "//div[@id='list_entry-30'"
            " and normalize-space(text())='Barbat et al (2006)"
            " - CR/LFLS_High-rise (8storeys)']")

        # click create new function
        newf = pla.xpath_finduniq(
            "//button[@title='Create a new function.']",
            100, 1)
        newf.click()

        pla.wait_new_page(
            newf, '/admin/vulnerability/generalinformation/add', timeout=30)

        # hide footer
        hide_header_footer()

        # start informations
        owner_field = pla.xpath_finduniq(
            "//select[@id='id_owner' and @name='owner']"
            "/option[normalize-space(text())='admin']")
        owner_field.click()

        name_field = pla.xpath_finduniq(
            "//input[@id='id_name' and @type='text']")
        name_field.send_keys(varname)

        cat_field = pla.xpath_finduniq(
            "//select[@id='id_category' and @name='category']"
            "/option[normalize-space(text())='Structure specific']")
        cat_field.click()

        str_type_field = pla.xpath_finduniq(
            "//select[@id='id_structure_type' and @name='structure_type']"
            "/option[normalize-space(text())='Building']")
        str_type_field.click()

        tax_type_field = pla.xpath_finduniq(
            "//select[@id='id_taxonomy_type' and @name='taxonomy_type']"
            "/option[normalize-space(text())='GEM']")
        tax_type_field.click()

        chk_tax_field = pla.xpath_finduniq(
            "//input[@id='id_taxonomy_text_0' and @type='checkbox']")
        chk_tax_field.click()

        visual_field = pla.xpath_finduniq(
            "//select[@id='OutTypeCB']"
            "/option[normalize-space(text())='Short']")
        visual_field.click()

        type_ofass_field = pla.xpath_finduniq(
            "//select[@id='id_type_of_assessment'"
            " and @name='type_of_assessment']"
            "/option[normalize-space(text())='Fragility']")
        type_ofass_field.click()

        auths_field = pla.xpath_finduniq(
            "//input[@id='id_authors' and @type='text' and @name='authors']")
        auths_field.send_keys(varauths)

        art_title_field = pla.xpath_finduniq(
            "//input[@id='id_article_title' and @type='text'"
            " and @name='article_title']")
        art_title_field.send_keys(varartitle)

        conf_pub_name_field = pla.xpath_finduniq(
            "//input[@id='id_publication_conference_name' and @type='text'"
            " and @name='publication_conference_name']")
        conf_pub_name_field.send_keys(varconfpubname)

        year_field = pla.xpath_finduniq(
            "//input[@id='id_year' and @type='text' and @name='year']")
        year_field.send_keys(varyear)

        # Fragility Functions
        var_lim = 'Horizontal Excitation'

        owner_frag_select = pla.xpath_finduniq(
            "//select[@id='id_fragility_func-0-owner'"
            " and @name='fragility_func-0-owner']")

        owner_frag_field = pla.xpath_finduniq(
            "option[normalize-space(text())='admin']",
            el=owner_frag_select)

        pla.scroll_into_view(owner_frag_select)

        owner_frag_field.click()

        meth_estim_select = pla.xpath_finduniq(
            "//select[@id='id_fragility_func-0-method_of_estimation'"
            " and @name='fragility_func-0-method_of_estimation']")

        meth_estim_field = pla.xpath_finduniq(
            "option[normalize-space(text())='Analytical']",
            el=meth_estim_select)

        pla.scroll_into_view(meth_estim_select)

        meth_estim_field.click()

        dam_scale_select = pla.xpath_finduniq(
            "//select[@id='id_fragility_func-0-damage_scale'"
            " and @name='fragility_func-0-damage_scale']")
        dam_scale_field = pla.xpath_finduniq(
            "option[normalize-space(text())='Custom']",
            el=dam_scale_select)
        dam_scale_field.click()

        eng_param_field = pla.xpath_finduniq(
            "//select[@id='id_fragility_func-0-engineering_demand_par'"
            " and @name='fragility_func-0-engineering_demand_par']"
            "/option[normalize-space(text())='Interstorey drift']")
        eng_param_field.click()

        desc_limit_field = pla.xpath_finduniq(
            "//input[@id="
            "'id_fragility_func-0-limit_states_desc' and @type='text'"
            " and @name='fragility_func-0-limit_states_desc']")
        desc_limit_field.send_keys(var_lim)

        func_dist_type_field = pla.xpath_finduniq(
            "//select[@id='id_fragility_func-0-func_distr_type'"
            " and @name='fragility_func-0-func_distr_type']"
            "/option[normalize-space(text())='Continuous']")
        func_dist_type_field.click()

        # Analytical Modelling Information
        varnumbdist = '4'

        owner_mod_info_field = pla.xpath_finduniq(
            "//select[@id='id_fragility_func-0-analytical_model_info-0-owner'"
            " and @name='fragility_func-0-analytical_model_info-0-owner']"
            "/option[normalize-space(text())='admin']")
        owner_mod_info_field.click()

        analysis_type_field = pla.xpath_finduniq(
            "//select[@id="
            "'id_fragility_func-0-analytical_model_info-0-analysis_type'"
            " and @name="
            "'fragility_func-0-analytical_model_info-0-analysis_type']"
            "/option[normalize-space(text())="
            "'Nonlinear dynamic analysis (NLD)']")
        analysis_type_field.click()

        model_type_select = pla.xpath_finduniq(
            "//select[@id="
            "'id_fragility_func-0-analytical_model_info-0-model_type'"
            " and @name='"
            "fragility_func-0-analytical_model_info-0-model_type']")
        model_type_field = pla.xpath_finduniq(
            "option[normalize-space(text())='2D story-by-story']",
            el=model_type_select)
        model_type_field.click()

        meth_uncert_field = pla.xpath_finduniq(
            "//select[@id="
            "'id_fragility_func-0-analytical_model_"
            "info-0-method_uncert_propag'"
            " and @name="
            "'fragility_func-0-analytical_model_info-0-method_uncert_propag']"
            "/option[normalize-space(text())="
            "'Random Monte-Carlo or Latin Hypercube sampling']")
        meth_uncert_field.click()

        numb_dist_field = pla.xpath_finduniq(
            "//input[@id="
            "'id_fragility_func-0-analytical_model_info-0-models_num'"
            " and @type='text'"
            " and @name="
            "'fragility_func-0-analytical_model_info-0-models_num']")
        numb_dist_field.send_keys(varnumbdist)

        eval_im_select = pla.xpath_finduniq(
            "//select[@id="
            "'id_fragility_func-0-analytical_model_info-0-evaluation_of_im'"
            " and @name="
            "'fragility_func-0-analytical_model_info-0-evaluation_of_im']")
        eval_im_field = pla.xpath_finduniq(
            "option[normalize-space(text())="
            "'Spectrum-compatible Accelerograms']",
            el=eval_im_select)
        pla.scroll_into_view(eval_im_select)
        eval_im_field.click()

        # Predictor Variables (I.M.)
        period = '2.28'
        min_period = '0.75'
        max_period = '2.75'

        owner_predict_select = pla.xpath_finduniq(
            "//select[@id='id_fragility_func-0-predictor_var-0-owner']")

        owner_predict_field = pla.xpath_finduniq(
            "option[normalize-space(text())='admin']",
            el=owner_predict_select)

        pla.scroll_into_view(owner_predict_select)

        owner_predict_field.click()

        int_measure_type_field = pla.xpath_finduniq(
            "//select[@id="
            "'id_fragility_func-0-predictor_var-0-intensity_measure_type'"
            " and @name="
            "'fragility_func-0-predictor_var-0-intensity_measure_type']"
            "/option[normalize-space(text())='Sa(T)']")
        int_measure_type_field.click()

        int_measure_unit_field = pla.xpath_finduniq(
            "//select[@id="
            "'id_fragility_func-0-predictor_var-0-intensity_measure_unit'"
            " and @name="
            "'fragility_func-0-predictor_var-0-intensity_measure_unit']"
            "/option[normalize-space(text())='g']")
        int_measure_unit_field.click()

        type_period_field = pla.xpath_finduniq(
            "//select[@id='id_fragility_func-0-predictor_var-0-type_of_period'"
            " and @name='fragility_func-0-predictor_var-0-type_of_period']"
            "/option[normalize-space(text())='Telastic (s)']")
        type_period_field.click()

        period_field = pla.xpath_finduniq(
            "//input[@id='id_fragility_func-0-predictor_var-0-period'"
            " and @type='number'"
            " and @name='fragility_func-0-predictor_var-0-period']")
        period_field.send_keys(period)

        min_field = pla.xpath_finduniq(
            "//input[@id='id_fragility_func-0-predictor_var-0-minimum_im'"
            " and @type='number'"
            " and @name='fragility_func-0-predictor_var-0-minimum_im']")
        min_field.send_keys(min_period)

        max_field = pla.xpath_finduniq(
            "//input[@id='id_fragility_func-0-predictor_var-0-maximum_im'"
            " and @type='number'"
            " and @name='fragility_func-0-predictor_var-0-maximum_im']")
        max_field.send_keys(max_period)

        # Continous Function Distributions
        mean = '1.85'
        stan_dev = '.23'
        area = ''

        owner_continous_select = pla.xpath_finduniq(
            "//select[@id='id_fragility_func-0-func_distr_frag_cont-0-owner'"
            " and @name='fragility_func-0-func_distr_frag_cont-0-owner']")
        owner_continous_field = pla.xpath_finduniq(
            "option[normalize-space(text())='admin']",
            el=owner_continous_select)
        pla.scroll_into_view(owner_continous_select)
        owner_continous_field.click()

        mean_field = pla.xpath_finduniq(
            "//input[@id='id_fragility_func-0-func_distr_frag_cont-0-mean'"
            " and @type='text'"
            " and @name='fragility_func-0-func_distr_frag_cont-0-mean']")
        mean_field.send_keys(mean)

        stan_dev_field = pla.xpath_finduniq(
            "//input[@id='id_fragility_func-0-func_distr_frag_cont-0-std_dev'"
            " and @type='text'"
            " and @name='fragility_func-0-func_distr_frag_cont-0-std_dev']")
        stan_dev_field.send_keys(stan_dev)

        fdist_shape_field = pla.xpath_finduniq(
            "//select[@id="
            "'id_fragility_func-0-func_distr_frag_cont-0-func_distr_shape'"
            " and @name="
            "'fragility_func-0-func_distr_frag_cont-0-func_distr_shape']"
            "/option[normalize-space(text())='Lognormal']")
        fdist_shape_field.click()

        # Q.R.S For Analytical Functions/Curves
        owner_qrs_select = pla.xpath_finduniq(
            "//select[@id='id_fragility_func-0-qrs_analytical-0-owner'"
            " and @name='fragility_func-0-qrs_analytical-0-owner']")
        owner_qrs_field = pla.xpath_finduniq(
            "option[normalize-space(text())='admin']",
            el=owner_qrs_select)
        pla.scroll_into_view(owner_qrs_select)
        owner_qrs_field.click()

        # Data quality
        compl_model_field = pla.xpath_finduniq(
            "//select[@id='"
            "id_fragility_func-0-qrs_analytical-0-model_completeness'"
            " and @name="
            "'fragility_func-0-qrs_analytical-0-model_completeness']"
            "/option[normalize-space(text())='Superior']")
        compl_model_field.click()

        # Geographical Applicability
        owner_geog_select = pla.xpath_finduniq(
            "//select[@id='id_geo_applicability-0-owner'"
            " and @name='geo_applicability-0-owner']")
        owner_geog_field = pla.xpath_finduniq(
            "option[normalize-space(text())='admin']",
            el=owner_geog_select)
        pla.scroll_into_view(owner_geog_select)
        owner_geog_field.click()

        region_field = pla.xpath_finduniq(
            "//select[@id='id_geo_applicability-0-region'"
            " and @name='geo_applicability-0-region']"
            "/option[normalize-space(text())='Africa (0)']")
        region_field.click()

        chk_region_field = pla.xpath_findfirst(
            "//input[@value='Select all'"
            " and @type='button']")
        chk_region_field.send_keys(Keys.ENTER)

        area_field = pla.xpath_finduniq(
            "//input[@id='id_geo_applicability-0-area' and @type='text'"
            " and @name='geo_applicability-0-area']")
        area_field.send_keys(area)

        # click save button
        save = pla.xpath_findfirst(
            "//input[@type='submit' and @class='default' and @name='_save']")
        save.click()

        pla.xpath_finduniq(
            "//li[@class='success']")

        # edit function
        pla.get(vul_url)

        # hide footer
        hide_header_footer()

        curve = pla.xpath_finduniq(
            "//div[@class='list_entry'"
            " and normalize-space(text())='%s']" % varname)
        curve.click()

        details = pla.xpath_finduniq(
            "//button[@id='more_details']",
            100, 1)
        details.click()

        edit = pla.xpath_finduniq(
            "//button[@value='Edit' and @title='Edit curve']",
            100, 1)
        edit.click()

        # hide footer
        hide_header_footer()

        # edit name
        edit_name_field = pla.xpath_finduniq(
            "//input[@id='id_name' and @type='text']")
        edit_name_field.clear()
        edit_name_field.send_keys(new_varname)

        edit_owner_geog_select = pla.xpath_finduniq(
            "//select[@id='id_geo_applicability-0-owner'"
            " and @name='geo_applicability-0-owner']")
        edit_owner_geog_field = pla.xpath_finduniq(
            "option[normalize-space(text())='admin']",
            el=edit_owner_geog_select)
        pla.scroll_into_view(edit_owner_geog_select)
        edit_owner_geog_field.click()

        edit_region_field = pla.xpath_finduniq(
            "//select[@id='id_geo_applicability-0-region'"
            " and @name='geo_applicability-0-region']"
            "/option[normalize-space(text())='Asia (0)']")
        edit_region_field.click()

        # save edit
        edit_save = pla.xpath_findfirst(
            "//input[@type='submit' and @class='default' and @name='_save']")
        edit_save.click()

        # add to cart
        pla.get(vul_url)

        # hide footer
        hide_header_footer()

        add_cart_curve = pla.xpath_finduniq(
            "//div[@class='list_entry'"
            " and normalize-space(text())='%s']" % new_varname)
        add_cart_curve.click()

        add_cart_details = pla.xpath_finduniq(
            "//button[@id='more_details']",
            100, 1)
        add_cart_details.click()

        add_to_cart = pla.xpath_finduniq(
            "//button[@value='Add to cart'"
            " and @title='add to collection of curves to export as a single NRML file']",
            100, 1)
        add_to_cart.click()

        cart = pla.xpath_finduniq(
            "//button[@value='Back to cart'"
            "and @title='go to curves collection exportable as single NRML file']",
            100, 1)
        cart.click()

        check_curve_cart = pla.xpath_finduniq(
            "//div[normalize-space(text())='%s']" % new_varname)

        # delete function
        pla.get(vul_url)

        # hide footer
        hide_header_footer()

        del_curve = pla.xpath_finduniq(
            "//div[@class='list_entry'"
            " and normalize-space(text())='%s']" % new_varname)
        del_curve.click()

        del_details = pla.xpath_finduniq(
            "//button[@id='more_details']",
            100, 1)
        del_details.click()

        del_edit = pla.xpath_finduniq(
            "//button[@value='Edit' and @title='Edit curve']",
            100, 1)
        del_edit.click()

        # deleting curve
        delete = pla.xpath_findfirst(
            "//a[@class='deletelink' and normalize-space(text())='Delete']",
            100, 1)
        delete.click()

        # hide footer
        hide_header_footer()

        # confirm delete
        conf_delete = pla.xpath_finduniq("//input[@type='submit']", 100, 1)

        conf_delete.click()

        pla.wait_new_page(
            conf_delete, '/vulnerability/list/?type_of_assessment=1',
            timeout=30)

        pla.xpath_finduniq(
            "//li[@class='info'"
            " and contains(text(), 'was deleted successfully')]")


class VulnerabilityOneTest(unittest.TestCase):
    pl_one = None

    @classmethod
    def setUpClass(cls):
        print('\nSETUP')
        pla = platform_get()

        pla.user_add('one', 'one', 'one@example.com')
        cls.pl_one = pla.platform_create(user='one', passwd='one')
        cls.pl_one.init(landing='/vulnerability/list')

    @classmethod
    def tearDownClass(cls):
        print('TEARDOWN\n')
        cls.platform_one_destroy()

    @classmethod
    def platform_one_destroy(cls):
        pla = platform_get()
        if cls.pl_one:
            hide_header_footer(pl=cls.pl_one, disp='block')
            pla.platform_destroy(cls.pl_one)
            cls.pl_one = None
            pla.user_del('one')

    def platform_one_get(self):
        return self.__class__.pl_one

    def clone_test(self):
        return
        os.environ.setdefault("DJANGO_SETTINGS_MODULE", "geonode.settings")
        django.setup()

        from openquakeplatform.vulnerability.models import (
            GeneralInformation, FragilityFunc, FuncDistrFragCont)

        gi_ct = len(GeneralInformation.objects.all())
        ff_ct = len(FragilityFunc.objects.all())
        fdfc_ct = len(FuncDistrFragCont.objects.all())

        pl_one = self.platform_one_get()

        # go to test page
        pl_one.get('/vulnerability/list')

        list_item = pl_one.xpath_finduniq(
            "//div[@id='list_func']/div[contains(normalize-space(text())"
            ", '%s')]" % ("5 Storey Non-Ductile RC-MRFs (Horizontal"
                          " Excitation) [Noroozinejad 2016]"))
        pl_one.driver.execute_script(
            '$(arguments[0]).trigger("click")', list_item)

        more_tag = pl_one.xpath_finduniq("//button[@value='More details']")
        pl_one.driver.execute_script(
            '$(arguments[0]).trigger("click")', more_tag)

        curve_id = list_item.get_attribute('id')[11:]
        pl_one.wait_new_page(
            more_tag,
            '/vulnerability/view/%s' % curve_id,
            timeout=20)
        clone_tag = pl_one.xpath_finduniq("//button[@value='Clone']")

        pl_one.driver.execute_script(
            '$(arguments[0]).trigger("click")', clone_tag)

        pl_one.wait_new_page(
            clone_tag,
            ('http://localhost:8000/admin/vulnerability/'
             'generalinformation/%s/?gem_clone_btn=true') % curve_id,
            timeout=100)

        time.sleep(3)
        hide_header_footer(pl=pl_one)

        root = general_information(
            pl_one, None, "TEST CLONE FUNCTION from selenium")

        ffun = fragility_func(pl_one, root)

        func_distr_frag_cont(
            pl_one, ffun, mean="0.56", std_dev="0.19",
            func_distr_shape="Lognormal")

        edit_save = pl_one.xpath_findfirst(
            "//input[@type='submit' and @class='default' and @name='_save']")
        edit_save.click()

        time.sleep(3)

        gi_nct = len(GeneralInformation.objects.all())
        ff_nct = len(FragilityFunc.objects.all())
        fdfc_nct = len(FuncDistrFragCont.objects.all())

        self.assertEqual(gi_ct + 1, gi_nct)
        self.assertEqual(ff_ct + 1, ff_nct)
        self.assertEqual(fdfc_ct + 1, fdfc_nct)

        self.platform_one_destroy()

        gi_cct = len(GeneralInformation.objects.all())
        ff_cct = len(FragilityFunc.objects.all())
        fdfc_cct = len(FuncDistrFragCont.objects.all())

        self.assertEqual(gi_ct, gi_cct)
        self.assertEqual(ff_ct, ff_cct)
        self.assertEqual(fdfc_ct, fdfc_cct)

        return


class VulnerabilityTest(unittest.TestCase):
    @unittest.skip("jasmine_test temporarily disabled")
    def jasmine_test(self):

        pla = platform_get()

        # go to test page
        pla.get('/vulnerability/test')

        # wait DOM population via async JS
        pla.xpath_finduniq(
            "//div[@class='jasmine_html-reporter']/div"
            "[@class='results']/div[@class='summary']",
            100, 0.1)

        # check the result of tests
        pla.xpath_finduniq(
            "//span[@class='bar passed' and contains"
            "(normalize-space(text()), ', 0 failures')]")

    def taxonomy_full2short_test(self):

        from openquakeplatform.common.taxonomy import taxonomy_full2short

        failed = 0
        data_path = os.path.join(os.path.dirname(
            sys.modules[self.__module__].__file__), 'data')

        with open(os.path.join(data_path, 'taxonomies.txt')) as f:
            csv_rows = csv.reader(f, delimiter='|')
            for csv_row in csv_rows:
                taxonomy_type = csv_row[0]
                full = csv_row[1]
                short_exp = csv_row[2]

                # if taxonomy_type != gem_taxonomy => continue
                if taxonomy_type != '1':
                    continue
                short = taxonomy_full2short(full)
                if short != short_exp:
                    sys.stderr.write("IN: [%s] OUT: [%s] EXP: [%s]\n" % (
                        full, short, short_exp))
                    failed += 1

        self.assertEqual(failed, 0)

    def taxonomy_test(self):

        pla = platform_get()

        pla.user_add('one', 'one', 'one@example.com')
        plb = pla.platform_create(user='one', passwd='one')
        plb.init(landing='/vulnerability/list')

        new_func_btn = plb.xpath_finduniq(
            "//li[@class='vuln_menu']/form[@action='/admin/vulnerability/"
            "generalinformation/add/']/button[@type='submit' and "
            "@value='New function']", 300, 1)

        new_func_btn.click()
        plb.wait_new_page(new_func_btn,
                          '/admin/vulnerability/generalinformation/add',
                          timeout=20)

        try:
            hide_header_footer(pl=plb)
            time.sleep(2)

            root = general_information(
                plb, None, "test function from selenium",
                "Structure class", "Building", "GEM",
                "CU+CIP", "Fragility", "The auth", "The title",
                "Conference name", "2002", "", "Gen comment",
                "use case")

            dom_taxo_text_taxtweb = plb.xpath_finduniq(
                "fieldset/div/div/a[@id='id_taxonomy_text_taxtweb']", el=root)

            dom_taxo_text_taxtweb.click()

            # taxtweb popup
            plb.select_window_by_name("taxtweb - GEM building taxonomy editor")

            try:
                dontshow_tag = plb.xpath_finduniq(
                    "//div[@id='taxtweb_splash']//input[@name='dontshowmeagain']",
                    times=10)
                plb.wait_visibility(dontshow_tag)
                dontshow_tag.click()
                close_tag = plb.xpath_finduniq(
                    "//div[@id='taxtweb_splash']//button[@name='close_btn']")
                close_tag.click()
            # for future inspections if needed
            # except Exception as e:
                # print "EXCEPT HERE ! %s" % type(e)
            except Exception:
                pass

            samedirect = plb.xpath_finduniq("//input[@id='DirectionCB']")
            samedirect.click()

            dir_y = plb.xpath_finduniq("//li[@id='sub1tab_id-2']")
            dir_y.click()

            material_y = plb.xpath_finduniq("//select[@id='MaterialCB12']")
            plb.select_item_set(material_y, "Steel")

            mat_tech_y = plb.xpath_finduniq("//select[@id='MaterialCB22']")
            plb.select_item_set(mat_tech_y, "Hot-rolled steel members")

            mat_prop_y = plb.xpath_finduniq("//select[@id='MaterialCB32']")
            plb.select_item_set(mat_prop_y, "Riveted connections")

            popform = plb.xpath_finduniq("//li[@id='id_populate_form']")
            popform.click()
            time.sleep(1)

            # close popup and return to main window
            plb.windows_reset()

            taxt_view = plb.xpath_finduniq("//input[@id='id_taxonomy_gem_view']")
            self.assertEqual(taxt_view.get_attribute('value'),
                             u'DX/CU+CIP/DY/S+SR+RIV')

            outtype = plb.xpath_finduniq("//select[@id='OutTypeCB']")
            plb.select_item_set(outtype, "Full")

            taxt_view = plb.xpath_finduniq("//input[@id='id_taxonomy_gem_view']")
            self.assertEqual(taxt_view.get_attribute('value'),
                             u'DX+D99/CU+CIP/L99/DY+D99/S+SR+RIV/L99/H99/Y99/OC99/'
                             'BP99/PLF99/IR99/EW99/RSH99+RMT99+R99+RWC99/'
                             'F99+FWC99/FOS99')

            frag_func_root = fragility_func(
                plb, root, owner=None, method_of_estimation="Analytical",
                damage_scale="Custom", engineering_demand_par="Interstorey drift",
                limit_states_desc=(
                    "Collapse Defined based on IDA and other methods"),
                func_distr_type="Discrete")

            hide_header_footer(pl=plb, disp='block')
            time.sleep(2)
        except Exception as exc:
            if plb:
                plb.windows_reset()
                hide_header_footer(pl=plb, disp='block')
            raise exc

        # to be continue ...
        pla.platform_destroy(plb)
        pla.user_del('one')
