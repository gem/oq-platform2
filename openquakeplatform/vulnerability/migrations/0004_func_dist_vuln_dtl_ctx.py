# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import migrations
from openquakeplatform.vulnerability.models import (
    FuncDistrDTLDiscr, FuncDistrVulnDiscr
)


def forwards_func(apps, schema_editor):
    db_alias = schema_editor.connection.alias

    # FIX var_val_coeff for each type of curve
    cls = FuncDistrDTLDiscr

    funcs = cls.objects.using(
        db_alias).all()

    for func in funcs:
        to_save = False

        if func.var_mean_val is not None and func.var_mean_val != "":
            if func.var_val_coeff is None or func.var_val_coeff == "":
                func.var_val_coeff = ";".join(
                    "0" * len(func.var_mean_val.split(';')))
                to_save = True

            if to_save:
                func.save()
        else:
            raise ValueError('"var_mean_val" is None')

    # FIX resp_var_val_coeff for each type of curve
    cls = FuncDistrVulnDiscr

    funcs = cls.objects.using(
        db_alias).all()

    for func in funcs:
        to_save = False

        if func.resp_var_mean_val is not None and func.resp_var_mean_val != "":
            if (func.resp_var_val_coeff is None
               or func.resp_var_val_coeff == ""):
                func.resp_var_val_coeff = ";".join(
                    "0" * len(func.resp_var_mean_val.split(';')))
                to_save = True

            if to_save:
                func.save()
        else:
            raise ValueError('"resp_var_mean_val" is None')


def backwards_func(apps, schema_editor):
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('vulnerability', '0003_func_dist_shape_def_val_scm'),
    ]

    operations = [
        migrations.RunPython(forwards_func, backwards_func),
    ]
