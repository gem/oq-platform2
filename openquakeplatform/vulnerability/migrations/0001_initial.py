# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import migrations, models
import django.contrib.gis.db.models.fields
from django.conf import settings
import openquakeplatform.vulnerability.models
import django.core.validators
import openquakeplatform.models


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AnalysisType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=200)),
                ('user_def', models.BooleanField(default=True, editable=False)),
                ('owner', models.ForeignKey(related_name='vulnerability_analysistype_owner', verbose_name='owner', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AnalyticalModelInfo',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('model_type', models.IntegerField(blank=True, null=True, choices=[(1, b'3D'), (2, b'2D element-by-element'), (3, b'2D story-by-story'), (4, b'1D')])),
                ('method_uncert_propag', models.IntegerField(blank=True, null=True, verbose_name=b'Method of uncertainty propagation', choices=[(1, b'Random Monte-Carlo or Latin Hypercube sampling'), (2, b'Set of index buildings'), (3, b'Single index building')])),
                ('models_num', models.IntegerField(null=True, verbose_name=b'Number of distinct structural models analysed', blank=True)),
                ('analysis_type', models.ForeignKey(blank=True, to='vulnerability.AnalysisType', null=True)),
            ],
            options={
                'verbose_name': 'analytical modelling information',
                'verbose_name_plural': 'analytical modelling information',
            },
        ),
        migrations.CreateModel(
            name='CapacityCurveFunc',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('method_of_estimation', models.IntegerField(choices=[(1, b'Analytical'), (2, b'Empirical')])),
            ],
            options={
                'verbose_name': 'capacity curve function',
            },
        ),
        migrations.CreateModel(
            name='CC_AnalysisType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=200)),
                ('user_def', models.BooleanField(default=True, editable=False)),
                ('owner', models.ForeignKey(related_name='vulnerability_cc_analysistype_owner', verbose_name='owner', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CC_AnalyticalModelInfo',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('model_type', models.IntegerField(blank=True, null=True, choices=[(1, b'3D'), (2, b'2D element-by-element'), (3, b'2D story-by-story'), (4, b'1D')])),
                ('models_num', models.IntegerField(null=True, verbose_name=b'Number of distinct structural models analysed', blank=True)),
                ('struct_fund_period', models.FloatField(null=True, verbose_name=b'Fundamental period of the structure (s)', blank=True)),
                ('modal_part_fact', models.FloatField(null=True, verbose_name=b'Modal partecipation factor', blank=True)),
                ('analysis_type', models.ForeignKey(blank=True, to='vulnerability.CC_AnalysisType', null=True)),
                ('capacity_curve_func', models.OneToOneField(related_name='cc_analytical_model_info', verbose_name=b'capacity curve function', to='vulnerability.CapacityCurveFunc')),
                ('owner', models.ForeignKey(related_name='vulnerability_cc_analyticalmodelinfo_owner', verbose_name='owner', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'analytical modelling information',
                'verbose_name_plural': 'analytical modelling information',
            },
        ),
        migrations.CreateModel(
            name='CC_PredictorVar',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('engineering_demand_par', models.CharField(max_length=200, verbose_name=b'Engineering demand parameter', choices=[(b'', b'--------'), (b'1', b'Interstorey drift'), (b'2', b'Global drift'), (b'3', b'Lateral roof displacement'), (b'4', b'Chord rotation'), (b'5', b'Curvature'), (b'6', b'Spectral displacement')])),
                ('data_pts_num', models.IntegerField(verbose_name=b'Number of data points')),
                ('pred_var_units', models.CharField(max_length=200, verbose_name=b'Predictor variable units', choices=[(b'1', b'Dimensionless'), (b'2', b'cm'), (b'3', b'm'), (b'4', b'rad'), (b'5', b'rad/km'), (b'6', b'rad/m')])),
                ('pred_var_val', openquakeplatform.vulnerability.models.SemicolonSeparatedFloatField(help_text=b'The number of values must be consistent with the number of data points.', max_length=1024, verbose_name=b'Predictor variable values')),
                ('resp_var_par', models.CharField(max_length=200, verbose_name=b'Response variable parameter', choices=[(b'1', b'Base shear'), (b'2', b'Base bending moment'), (b'3', b'Spectral acceleration'), (b'4', b'Base shear coefficient (V/W)')])),
                ('resp_var_units', models.CharField(max_length=200, verbose_name=b'Response variable units', choices=[(b'1', b'kN'), (b'2', b'kN.m'), (b'3', b'g'), (b'4', b'cm/s^2'), (b'5', b'm/s^2'), (b'6', b'Dimensionless')])),
                ('resp_var_val', openquakeplatform.vulnerability.models.SemicolonSeparatedFloatField(help_text=b'The number of values must be consistent with the number of data points.', max_length=1024, verbose_name=b'Response variable values')),
                ('capacity_curve_func', models.OneToOneField(related_name='cc_predictor_var', verbose_name=b'capacity curve function', to='vulnerability.CapacityCurveFunc')),
                ('owner', models.ForeignKey(related_name='vulnerability_cc_predictorvar_owner', verbose_name='owner', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'capacity curve predictor variable',
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('name', models.CharField(max_length=200)),
                ('region', models.IntegerField(choices=[(b'', b'--------'), (1, b'Worldwide'), (2, b'Africa'), (3, b'North America'), (4, b'Central America & Caribbean'), (5, b'South America'), (6, b'Asia'), (7, b'Europe'), (8, b'Oceania'), (9, b'Antarctica')])),
                ('iso3', models.CharField(max_length=3, serialize=False, primary_key=True)),
                ('the_geom', django.contrib.gis.db.models.fields.GeometryField(srid=4326, null=True, blank=True)),
                ('is_visible', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name_plural': 'countries',
            },
        ),
        migrations.CreateModel(
            name='DamageToLossFunc',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('method_of_estimation', models.IntegerField(choices=[(1, b'Analytical'), (2, b'Empirical'), (3, b'Expert Opinion')])),
                ('damage_scale', models.IntegerField(blank=True, null=True, choices=[(1, b'MSK-76'), (2, b'EMS-98'), (3, b'EMS-92'), (4, b'HAZUS'), (5, b'ATC-13'), (6, b'Custom')])),
                ('limit_states_desc', openquakeplatform.vulnerability.models.SemicolonSeparatedStringField(help_text=b'Select damage scale to automatically populate this field', max_length=1024, verbose_name=b'Description of limit states')),
                ('resp_var', models.IntegerField(verbose_name=b'Response variable', choices=[(1, b'Damage factor'), (2, b'Fatality rate per occupant'), (3, b'Nonfatal injury rate per occupant'), (4, b'Fatality rate per exposed population'), (5, b'Direct economic factor')])),
            ],
            options={
                'verbose_name': 'damage to loss function',
            },
        ),
        migrations.CreateModel(
            name='EmpiricalModelInfo',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('structural_unit', models.IntegerField(blank=True, null=True, choices=[(1, b'Dwelling'), (2, b'Building')])),
                ('building_x_class_num', models.IntegerField(null=True, verbose_name=b'Number of buildings per class', blank=True)),
                ('empirical_data_src', models.CharField(max_length=200, null=True, verbose_name=b'Source of empirical data', blank=True)),
                ('building_aggr', models.IntegerField(blank=True, null=True, verbose_name=b'Building aggregation', choices=[(1, b'Building-by-building'), (2, b'Grouped')])),
                ('building_aggr_min_num', models.IntegerField(help_text=b'Mandatory if "Building aggregation" is "Grouped"', null=True, verbose_name=b'Minimum number of grouped buildings', blank=True)),
                ('aggr_unit_def', models.IntegerField(blank=True, null=True, verbose_name=b'Definitions of aggregated units', choices=[(1, b'GADM admin 2 region'), (2, b'GADM admin 3 region'), (3, b'Other admin region'), (4, b'Bins of IM')])),
            ],
            options={
                'verbose_name': 'empirical modelling information',
                'verbose_name_plural': 'empirical modelling information',
            },
        ),
        migrations.CreateModel(
            name='EngineeringDemandPar',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=200)),
                ('user_def', models.BooleanField(default=True, editable=False)),
                ('owner', models.ForeignKey(related_name='vulnerability_engineeringdemandpar_owner', verbose_name='owner', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'engineering demand parameter',
            },
        ),
        migrations.CreateModel(
            name='EvaluationOfIM',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=200)),
                ('user_def', models.BooleanField(default=True, editable=False)),
                ('owner', models.ForeignKey(related_name='vulnerability_evaluationofim_owner', verbose_name='owner', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'evaluation of I.M.',
                'verbose_name_plural': 'evaluations of I.M.',
            },
        ),
        migrations.CreateModel(
            name='FitAssessmentGoodness',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=200)),
                ('user_def', models.BooleanField(default=True, editable=False)),
                ('owner', models.ForeignKey(related_name='vulnerability_fitassessmentgoodness_owner', verbose_name='owner', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FragilityFunc',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('method_of_estimation', models.IntegerField(choices=[(1, b'Analytical'), (2, b'Empirical'), (3, b'Expert Opinion')])),
                ('damage_scale', models.IntegerField(blank=True, null=True, choices=[(1, b'MSK-76'), (2, b'EMS-98'), (3, b'EMS-92'), (4, b'HAZUS'), (5, b'ATC-13'), (6, b'Custom')])),
                ('limit_states_desc', openquakeplatform.vulnerability.models.SemicolonSeparatedStringField(help_text=b'Select damage scale to automatically populate this field', max_length=1024, verbose_name=b'Description of limit states')),
                ('func_distr_type', models.IntegerField(verbose_name=b'Function distribution type', choices=[(1, b'Discrete'), (2, b'Continuous')])),
                ('engineering_demand_par', models.ForeignKey(verbose_name=b'engineering demand parameter', blank=True, to='vulnerability.EngineeringDemandPar', null=True)),
            ],
            options={
                'verbose_name': 'fragility function',
            },
        ),
        migrations.CreateModel(
            name='FuncDistrDTLDiscr',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('var_mean_val', openquakeplatform.vulnerability.models.SemicolonSeparatedFloatField(max_length=1024, verbose_name=b'Mean values')),
                ('var_val_coeff', openquakeplatform.vulnerability.models.SemicolonSeparatedFloatField(max_length=1024, null=True, verbose_name=b'Coefficient of variation values', blank=True)),
                ('func_distr_shape', models.IntegerField(blank=True, help_text=b'Mandatory field if coefficient of variation values are specified', null=True, verbose_name=b'function distribution shape', choices=[(1, b'Lognormal'), (2, b'Beta')])),
                ('damage_to_loss_func', models.OneToOneField(related_name='func_distr_dtl_discr', verbose_name=b'damage to loss function', to='vulnerability.DamageToLossFunc')),
                ('owner', models.ForeignKey(related_name='vulnerability_funcdistrdtldiscr_owner', verbose_name='owner', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'discrete function distribution',
            },
        ),
        migrations.CreateModel(
            name='FuncDistrFragCont',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('mean', openquakeplatform.vulnerability.models.SemicolonSeparatedFloatField(help_text=b'The number of values must be consistent with the number of limit states.', max_length=1024, verbose_name=b'Mean')),
                ('std_dev', openquakeplatform.vulnerability.models.SemicolonSeparatedFloatField(help_text=b'The number of values must be consistent with the number of limit states.', max_length=1024, verbose_name=b'Standard deviation')),
                ('func_distr_shape', models.IntegerField(verbose_name=b'function distribution shape', choices=[(1, b'Lognormal')])),
                ('coeff_variation_mean', openquakeplatform.vulnerability.models.SemicolonSeparatedFloatField(help_text=b'The number of values must be consistent with the number of limit states.', max_length=1024, null=True, verbose_name=b'Coefficient of variation of the mean', blank=True)),
                ('coeff_variation_std_dev', openquakeplatform.vulnerability.models.SemicolonSeparatedFloatField(help_text=b'The number of values must be consistent with the number of limit states.', max_length=1024, null=True, verbose_name=b'Coefficient of variation of the standard deviation', blank=True)),
                ('predictor_var_corr_matrix', openquakeplatform.vulnerability.models.BidimensionalFloatField(help_text=b'The number of both rows and columns must be twice the number of limit states.', max_length=10240, null=True, verbose_name=b'Predictor variable correlation matrix', blank=True)),
                ('fragility_func', models.OneToOneField(related_name='func_distr_frag_cont', null=True, blank=True, to='vulnerability.FragilityFunc', verbose_name=b'fragility function')),
                ('owner', models.ForeignKey(related_name='vulnerability_funcdistrfragcont_owner', verbose_name='owner', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'continous function distribution',
            },
        ),
        migrations.CreateModel(
            name='FuncDistrFragDiscr',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('data_pts_num', models.IntegerField(verbose_name=b'Number of data points')),
                ('predictor_var_im_val', openquakeplatform.vulnerability.models.SemicolonSeparatedFloatField(help_text=b'The number of values must be consistent with the number of data points.', max_length=1024, verbose_name=b'Predictor variable (IM) values')),
                ('limit_state_prob_exceed', openquakeplatform.vulnerability.models.BidimensionalFloatField(help_text=b'The number of rows must be consistent with the specified number of limit states; the number of columns must consistent with the number of data points.', max_length=10240, verbose_name=b'Probability of limit state exceedance')),
                ('limit_state_prob_exceed_05', openquakeplatform.vulnerability.models.BidimensionalFloatField(help_text=b'The number of rows must be consistent with the specified number of limit states; the number of columns must consistent with the number of data points.', max_length=10240, null=True, verbose_name=b'Probability of limit state exceedance values (5% prediction interval)', blank=True)),
                ('limit_state_prob_exceed_95', openquakeplatform.vulnerability.models.BidimensionalFloatField(help_text=b'The number of rows must be consistent with the specified number of limit states; the number of columns must consistent with the number of data points.', max_length=10240, null=True, verbose_name=b'Probability of limit state exceedance values (95% prediction interval)', blank=True)),
                ('fragility_func', models.OneToOneField(related_name='func_distr_frag_discr', null=True, blank=True, to='vulnerability.FragilityFunc', verbose_name=b'fragility function')),
                ('owner', models.ForeignKey(related_name='vulnerability_funcdistrfragdiscr_owner', verbose_name='owner', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'discrete function distribution',
            },
        ),
        migrations.CreateModel(
            name='FuncDistrVulnCont',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('discretization_data_pts_num', models.IntegerField(null=True, verbose_name=b'Number of discretization data points', blank=True)),
                ('mean', models.FloatField()),
                ('std_dev', models.FloatField(verbose_name=b'Standard deviation')),
                ('func_distr_shape', models.IntegerField(verbose_name=b'function distribution shape', choices=[(1, b'Lognormal')])),
                ('mean_var_coef', models.FloatField(null=True, verbose_name=b'Coefficient of variation of the mean', blank=True)),
                ('sd_var_coef', models.FloatField(null=True, verbose_name=b'Coefficient of variation of the standard deviation', blank=True)),
                ('owner', models.ForeignKey(related_name='vulnerability_funcdistrvulncont_owner', verbose_name='owner', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'continuous function distribution',
            },
        ),
        migrations.CreateModel(
            name='FuncDistrVulnDiscr',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('data_pts_num', models.IntegerField(verbose_name=b'Number of data points')),
                ('predictor_var_im_val', openquakeplatform.vulnerability.models.SemicolonSeparatedFloatField(help_text=b'The number of values must be consistent with the number of data points.', max_length=1024, verbose_name=b'Predictor variable (IM) values')),
                ('resp_var_mean_val', openquakeplatform.vulnerability.models.SemicolonSeparatedFloatField(help_text=b'The number of values must be consistent with the number of data points.', max_length=1024, verbose_name=b'Response variable: mean values')),
                ('resp_var_val_coeff', openquakeplatform.vulnerability.models.SemicolonSeparatedFloatField(help_text=b'The number of values must be consistent with the number of data points.', max_length=1024, null=True, verbose_name=b'Response variable: coefficient of variation values', blank=True)),
                ('func_distr_shape', models.IntegerField(blank=True, help_text=b'Mandatory field if coefficient of variation values are specified', null=True, verbose_name=b'function distribution shape', choices=[(1, b'Lognormal'), (2, b'Beta')])),
                ('owner', models.ForeignKey(related_name='vulnerability_funcdistrvulndiscr_owner', verbose_name='owner', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'discrete function distribution',
            },
        ),
        migrations.CreateModel(
            name='GeneralInformation',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=200)),
                ('category', models.IntegerField(choices=[(1, b'Structure specific'), (2, b'Structure class'), (3, b'Nonstructural component'), (4, b'Population'), (5, b'Capital stock')])),
                ('structure_type', models.IntegerField(blank=True, help_text=b'"Building" type is only applicable to "Structure specific" or "Structure class"', null=True, choices=[(1, b'Building')])),
                ('taxonomy_text', models.CharField(max_length=1023, null=True, blank=True)),
                ('taxonomy_gem', models.CharField(max_length=1023, null=True, blank=True)),
                ('material', models.CharField(max_length=200, null=True, editable=False, blank=True)),
                ('llrs', models.CharField(verbose_name=b'lateral load resisting system (L.L.R.S.)', max_length=200, null=True, editable=False, blank=True)),
                ('type_of_assessment', models.IntegerField(choices=[(1, b'Fragility'), (2, b'Vulnerability'), (3, b'Damage-to-loss'), (4, b'Capacity curve')])),
                ('authors', openquakeplatform.models.UnaccentCharField(max_length=200)),
                ('article_title', models.CharField(max_length=200)),
                ('publication_conference_name', models.CharField(max_length=200)),
                ('year', models.IntegerField(validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2019)])),
                ('web_link', models.URLField(max_length=255, null=True, blank=True)),
                ('general_comments', models.TextField(max_length=1023, null=True, blank=True)),
                ('use_case_information', models.TextField(max_length=1023, null=True, blank=True)),
                ('cart', models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(related_name='vulnerability_generalinformation_owner', verbose_name='owner', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name', 'type_of_assessment'],
                'verbose_name': 'function',
            },
        ),
        migrations.CreateModel(
            name='GeoApplicability',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('area', models.CharField(max_length=200, null=True, blank=True)),
                ('lat', models.FloatField(null=True, blank=True)),
                ('lon', models.FloatField(null=True, blank=True)),
                ('address', models.TextField(null=True, blank=True)),
                ('countries', models.ManyToManyField(to='vulnerability.Country')),
                ('general_information', models.OneToOneField(related_name='geo_applicability', null=True, blank=True, to='vulnerability.GeneralInformation', verbose_name=b'general information')),
                ('owner', models.ForeignKey(related_name='vulnerability_geoapplicability_owner', verbose_name='owner', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'geographical applicability',
                'verbose_name_plural': 'geographical applicability',
            },
        ),
        migrations.CreateModel(
            name='ModelFittingMethodAssumption',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=200)),
                ('user_def', models.BooleanField(default=True, editable=False)),
                ('owner', models.ForeignKey(related_name='vulnerability_modelfittingmethodassumption_owner', verbose_name='owner', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PredictorVar',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('intensity_measure_type', models.CharField(max_length=200, choices=[(b'', b'--------'), (b'1', b'PGA'), (b'2', b'PGV'), (b'3', b'PGD'), (b'4', b'Sa(T)'), (b'5', b'Sd(T)'), (b'6', b'IA'), (b'7', b'CAV'), (b'8', b'RSD'), (b'9', b'MMI')])),
                ('intensity_measure_unit', models.CharField(help_text=b'Please select intensity measure type first', max_length=200, choices=[(b'1', b'g'), (b'2', b'cm/s^2'), (b'3', b'm/s^2'), (b'4', b'cm/s'), (b'5', b'm/s'), (b'6', b'cm'), (b'7', b'm'), (b'8', b's'), (b'9', b'g-s'), (b'10', b'Roman numbers')])),
                ('type_of_period', models.IntegerField(blank=True, help_text=b'Mandatory if the "Intensity measure type" is Sa(T) or Sd(T). Please leave this field empty otherwise.', null=True, choices=[(1, b'Telastic (s)'), (2, b'Tyielding (s)'), (3, b'Tinelastic (s)')])),
                ('period', models.FloatField(help_text=b'Mandatory if the "Intensity measure type" is Sa(T) or Sd(T). Please leave this field empty otherwise.', null=True, verbose_name=b'Period (s)', blank=True)),
                ('minimum_im', models.FloatField(verbose_name=b'Minimum IM')),
                ('maximum_im', models.FloatField(verbose_name=b'Maximum IM')),
                ('fragility_func', models.OneToOneField(related_name='predictor_var', null=True, blank=True, to='vulnerability.FragilityFunc', verbose_name=b'fragility function')),
                ('owner', models.ForeignKey(related_name='vulnerability_predictorvar_owner', verbose_name='owner', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'predictor variable (I.M.)',
                'verbose_name_plural': 'predictor variables (I.M.)',
            },
        ),
        migrations.CreateModel(
            name='ProcConstrInt',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=200)),
                ('user_def', models.BooleanField(default=True, editable=False)),
                ('owner', models.ForeignKey(related_name='vulnerability_procconstrint_owner', verbose_name='owner', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='QRSAnalytical',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('structural_details', models.IntegerField(blank=True, null=True, choices=[(1, b'Superior'), (2, b'Average'), (3, b'Marginal'), (4, b'NA')])),
                ('model_completeness', models.IntegerField(blank=True, null=True, verbose_name=b'Completeness of model', choices=[(1, b'Superior'), (2, b'Average'), (3, b'Marginal'), (4, b'NA')])),
                ('seismic_demand', models.IntegerField(blank=True, null=True, choices=[(1, b'Superior'), (2, b'Average'), (3, b'Marginal'), (4, b'NA')])),
                ('analysis_type', models.IntegerField(blank=True, null=True, choices=[(1, b'Superior'), (2, b'Average'), (3, b'Marginal'), (4, b'NA')])),
                ('limit_states_def', models.IntegerField(blank=True, null=True, verbose_name=b'Definition of Limit States', choices=[(1, b'Superior'), (2, b'Average'), (3, b'Marginal'), (4, b'NA')])),
                ('sampling_method', models.IntegerField(blank=True, null=True, choices=[(1, b'Superior'), (2, b'Average'), (3, b'Marginal'), (4, b'NA')])),
                ('cross_validation', models.IntegerField(blank=True, null=True, choices=[(1, b'Superior'), (2, b'Average'), (3, b'Marginal'), (4, b'NA')])),
                ('uncertainties_treatment', models.IntegerField(blank=True, null=True, verbose_name=b'Treatment of uncertainties', choices=[(1, b'Superior'), (2, b'Average'), (3, b'Marginal'), (4, b'NA')])),
                ('documentation_quality', models.IntegerField(blank=True, null=True, choices=[(1, b'Superior'), (2, b'Average'), (3, b'Marginal'), (4, b'NA')])),
                ('documentation_type', models.IntegerField(blank=True, null=True, verbose_name=b'Type of documentation', choices=[(1, b'Superior'), (2, b'Average'), (3, b'Marginal'), (4, b'NA')])),
                ('typology_repr', models.IntegerField(blank=True, null=True, verbose_name=b'Representation of typology', choices=[(1, b'Superior'), (2, b'Average'), (3, b'Marginal'), (4, b'NA')])),
                ('site_specific', models.IntegerField(blank=True, null=True, choices=[(1, b'Superior'), (2, b'Average'), (3, b'Marginal'), (4, b'NA')])),
                ('hazard_model', models.IntegerField(blank=True, null=True, choices=[(1, b'Superior'), (2, b'Average'), (3, b'Marginal'), (4, b'NA')])),
                ('fragility_func', models.OneToOneField(related_name='qrs_analytical', null=True, blank=True, to='vulnerability.FragilityFunc', verbose_name=b'fragility function')),
                ('owner', models.ForeignKey(related_name='vulnerability_qrsanalytical_owner', verbose_name='owner', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Q.R.S. for analytical function/curve',
                'verbose_name_plural': 'Q.R.S for analytical functions/curves',
            },
        ),
        migrations.CreateModel(
            name='QRSEmpirical',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('data_quantity', models.IntegerField(blank=True, null=True, choices=[(1, b'Superior'), (2, b'Average'), (3, b'Marginal'), (4, b'NA')])),
                ('constrained_categories', models.IntegerField(blank=True, null=True, choices=[(1, b'Superior'), (2, b'Average'), (3, b'Marginal'), (4, b'NA')])),
                ('excitation_observation', models.IntegerField(blank=True, null=True, choices=[(1, b'Superior'), (2, b'Average'), (3, b'Marginal'), (4, b'NA')])),
                ('damage_loss_observation', models.IntegerField(blank=True, null=True, verbose_name=b'Damage/loss observation', choices=[(1, b'Superior'), (2, b'Average'), (3, b'Marginal'), (4, b'NA')])),
                ('hindcasting', models.IntegerField(blank=True, null=True, choices=[(1, b'Superior'), (2, b'Average'), (3, b'Marginal'), (4, b'NA')])),
                ('cross_validation', models.IntegerField(blank=True, null=True, choices=[(1, b'Superior'), (2, b'Average'), (3, b'Marginal'), (4, b'NA')])),
                ('first_principles', models.IntegerField(blank=True, null=True, choices=[(1, b'Superior'), (2, b'Average'), (3, b'Marginal'), (4, b'NA')])),
                ('uncertainties_treatment', models.IntegerField(blank=True, null=True, verbose_name=b'Treatment of uncertainties', choices=[(1, b'Superior'), (2, b'Average'), (3, b'Marginal'), (4, b'NA')])),
                ('documentation_quality', models.IntegerField(blank=True, null=True, choices=[(1, b'Superior'), (2, b'Average'), (3, b'Marginal'), (4, b'NA')])),
                ('documentation_type', models.IntegerField(blank=True, null=True, verbose_name=b'Type of documentation', choices=[(1, b'Superior'), (2, b'Average'), (3, b'Marginal'), (4, b'NA')])),
                ('representativeness', models.IntegerField(blank=True, null=True, choices=[(1, b'Superior'), (2, b'Average'), (3, b'Marginal'), (4, b'NA')])),
                ('fragility_func', models.OneToOneField(related_name='qrs_empirical', null=True, blank=True, to='vulnerability.FragilityFunc', verbose_name=b'fragility function')),
                ('owner', models.ForeignKey(related_name='vulnerability_qrsempirical_owner', verbose_name='owner', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Q.R.S. for empirical function/curve',
                'verbose_name_plural': 'Q.R.S. for empirical functions/curves',
            },
        ),
        migrations.CreateModel(
            name='StatisticalInformation',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('fit_assessment_goodness', models.ForeignKey(verbose_name=b'goodness of fit assessment (G.L.M./G.A.M.)', blank=True, to='vulnerability.FitAssessmentGoodness', null=True)),
                ('fragility_func', models.OneToOneField(related_name='stat_info', null=True, blank=True, to='vulnerability.FragilityFunc', verbose_name=b'fragility function')),
                ('model_fitting_method_assumptions', models.ForeignKey(blank=True, to='vulnerability.ModelFittingMethodAssumption', null=True)),
                ('owner', models.ForeignKey(related_name='vulnerability_statisticalinformation_owner', verbose_name='owner', to=settings.AUTH_USER_MODEL)),
                ('proc_constr_conf_int', models.ForeignKey(related_name='stat_info_conf', verbose_name=b'proc. for constructing conf. intervals', blank=True, to='vulnerability.ProcConstrInt', null=True)),
                ('proc_constr_pred_int', models.ForeignKey(related_name='stat_info_pref', verbose_name=b'proc. for constructing pred. intervals', blank=True, to='vulnerability.ProcConstrInt', null=True)),
            ],
            options={
                'verbose_name_plural': 'statistical information',
            },
        ),
        migrations.CreateModel(
            name='StatModel',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=200)),
                ('user_def', models.BooleanField(default=True, editable=False)),
                ('owner', models.ForeignKey(related_name='vulnerability_statmodel_owner', verbose_name='owner', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StatModelFittingMethod',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=200)),
                ('user_def', models.BooleanField(default=True, editable=False)),
                ('owner', models.ForeignKey(related_name='vulnerability_statmodelfittingmethod_owner', verbose_name='owner', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TaxonomyType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=200)),
                ('user_def', models.BooleanField(default=True, editable=False)),
                ('owner', models.ForeignKey(related_name='vulnerability_taxonomytype_owner', verbose_name='owner', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='VulnerabilityFunc',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('method_of_estimation', models.IntegerField(choices=[(1, b'Analytical'), (2, b'Empirical'), (3, b'Expert Opinion')])),
                ('resp_var', models.IntegerField(verbose_name=b'Response variable', choices=[(1, b'Damage factor'), (2, b'Fatality rate per occupant'), (3, b'Nonfatal injury rate per occupant'), (4, b'Fatality rate per exposed population'), (5, b'Direct economic factor')])),
                ('func_distr_type', models.IntegerField(verbose_name=b'Function distribution type', choices=[(1, b'Discrete'), (2, b'Continuous')])),
                ('general_information', models.OneToOneField(related_name='vulnerability_func', null=True, blank=True, to='vulnerability.GeneralInformation', verbose_name=b'general information')),
                ('owner', models.ForeignKey(related_name='vulnerability_vulnerabilityfunc_owner', verbose_name='owner', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'vulnerability function',
            },
        ),
        migrations.AddField(
            model_name='statisticalinformation',
            name='stat_model',
            field=models.ForeignKey(verbose_name=b'statistical model', blank=True, to='vulnerability.StatModel', null=True),
        ),
        migrations.AddField(
            model_name='statisticalinformation',
            name='stat_model_fitting_method',
            field=models.ForeignKey(verbose_name=b'statistical model fitting method', blank=True, to='vulnerability.StatModelFittingMethod', null=True),
        ),
        migrations.AddField(
            model_name='statisticalinformation',
            name='vulnerability_func',
            field=models.OneToOneField(related_name='stat_info', null=True, blank=True, to='vulnerability.VulnerabilityFunc', verbose_name=b'vulnerability function'),
        ),
        migrations.AddField(
            model_name='qrsempirical',
            name='vulnerability_func',
            field=models.OneToOneField(related_name='qrs_empirical', null=True, blank=True, to='vulnerability.VulnerabilityFunc', verbose_name=b'vulnerability function'),
        ),
        migrations.AddField(
            model_name='qrsanalytical',
            name='vulnerability_func',
            field=models.OneToOneField(related_name='qrs_analytical', null=True, blank=True, to='vulnerability.VulnerabilityFunc', verbose_name=b'vulnerability function'),
        ),
        migrations.AddField(
            model_name='predictorvar',
            name='vulnerability_func',
            field=models.OneToOneField(related_name='predictor_var', null=True, blank=True, to='vulnerability.VulnerabilityFunc', verbose_name=b'vulnerability function'),
        ),
        migrations.AddField(
            model_name='generalinformation',
            name='taxonomy_type',
            field=models.ForeignKey(blank=True, to='vulnerability.TaxonomyType', help_text=b'Mandatory if the structure type is "Building".', null=True),
        ),
        migrations.AddField(
            model_name='funcdistrvulndiscr',
            name='vulnerability_func',
            field=models.OneToOneField(related_name='func_distr_vuln_discr', verbose_name=b'vulnerability function', to='vulnerability.VulnerabilityFunc'),
        ),
        migrations.AddField(
            model_name='funcdistrvulncont',
            name='vulnerability_func',
            field=models.OneToOneField(related_name='func_distr_vuln_cont', verbose_name=b'vulnerability function', to='vulnerability.VulnerabilityFunc'),
        ),
        migrations.AddField(
            model_name='fragilityfunc',
            name='general_information',
            field=models.OneToOneField(related_name='fragility_func', null=True, blank=True, to='vulnerability.GeneralInformation', verbose_name=b'general information'),
        ),
        migrations.AddField(
            model_name='fragilityfunc',
            name='owner',
            field=models.ForeignKey(related_name='vulnerability_fragilityfunc_owner', verbose_name='owner', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='empiricalmodelinfo',
            name='evaluation_of_im',
            field=models.ForeignKey(verbose_name=b'evaluation of I.M.', blank=True, to='vulnerability.EvaluationOfIM', null=True),
        ),
        migrations.AddField(
            model_name='empiricalmodelinfo',
            name='fragility_func',
            field=models.OneToOneField(related_name='empirical_model_info', null=True, blank=True, to='vulnerability.FragilityFunc', verbose_name=b'fragility function'),
        ),
        migrations.AddField(
            model_name='empiricalmodelinfo',
            name='owner',
            field=models.ForeignKey(related_name='vulnerability_empiricalmodelinfo_owner', verbose_name='owner', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='empiricalmodelinfo',
            name='vulnerability_func',
            field=models.OneToOneField(related_name='empirical_model_info', null=True, blank=True, to='vulnerability.VulnerabilityFunc', verbose_name=b'vulnerability function'),
        ),
        migrations.AddField(
            model_name='damagetolossfunc',
            name='general_information',
            field=models.OneToOneField(related_name='damage_to_loss_func', null=True, blank=True, to='vulnerability.GeneralInformation', verbose_name=b'general information'),
        ),
        migrations.AddField(
            model_name='damagetolossfunc',
            name='owner',
            field=models.ForeignKey(related_name='vulnerability_damagetolossfunc_owner', verbose_name='owner', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='capacitycurvefunc',
            name='general_information',
            field=models.OneToOneField(related_name='capacity_curve_func', null=True, blank=True, to='vulnerability.GeneralInformation', verbose_name=b'general information'),
        ),
        migrations.AddField(
            model_name='capacitycurvefunc',
            name='owner',
            field=models.ForeignKey(related_name='vulnerability_capacitycurvefunc_owner', verbose_name='owner', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='analyticalmodelinfo',
            name='evaluation_of_im',
            field=models.ForeignKey(verbose_name=b'evaluation of I.M.', blank=True, to='vulnerability.EvaluationOfIM', null=True),
        ),
        migrations.AddField(
            model_name='analyticalmodelinfo',
            name='fragility_func',
            field=models.OneToOneField(related_name='analytical_model_info', null=True, blank=True, to='vulnerability.FragilityFunc', verbose_name=b'fragility function'),
        ),
        migrations.AddField(
            model_name='analyticalmodelinfo',
            name='owner',
            field=models.ForeignKey(related_name='vulnerability_analyticalmodelinfo_owner', verbose_name='owner', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='analyticalmodelinfo',
            name='vulnerability_func',
            field=models.OneToOneField(related_name='analytical_model_info', null=True, blank=True, to='vulnerability.VulnerabilityFunc', verbose_name=b'vulnerability function'),
        ),
        migrations.AlterUniqueTogether(
            name='generalinformation',
            unique_together=set([('name', 'type_of_assessment')]),
        ),
    ]
